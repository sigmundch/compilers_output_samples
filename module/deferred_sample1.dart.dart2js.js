// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
self.$__dart_deferred_initializers__ = self.$__dart_deferred_initializers__ || Object.create(null);
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      var result;
      try {
        if (holder[name] === uninitializedSentinel)
          result = holder[name] = initializer();
        else
          result = holder[name];
      } finally {
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    LateInitializationErrorImpl$: function(_message) {
      return new H.LateInitializationErrorImpl(_message);
    },
    LateInitializationErrorImpl: function LateInitializationErrorImpl(t0) {
      this.__internal$_message = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    requiresPreamble: function() {
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, $constructor, constructorName;
      if (object instanceof P.Object)
        return H.instanceTypeName(object);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = H.constructorNameFallback(object);
        if (H.boolConversionCheck(H.Primitives__saneNativeClassName(dispatchName)))
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && H.boolConversionCheck(H.Primitives__saneNativeClassName(constructorName)))
            return constructorName;
        }
      }
      return H.instanceTypeName(object);
    },
    Primitives__saneNativeClassName: function($name) {
      var t1;
      if ($name != null) {
        t1 = J.getInterceptor$($name);
        t1 = !H.boolConversionCheck(t1.$eq($name, "Object")) && !H.boolConversionCheck(t1.$eq($name, ""));
      } else
        t1 = false;
      return t1;
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives_stringConcatUnchecked: function(string1, string2) {
      return string1 + string2;
    },
    Primitives_flattenString: function(str) {
      return str.charCodeAt(0) == 0 ? str : str;
    },
    Primitives_extractStackTrace: function(error) {
      return H.getTraceFromException(error.$thrownJsError);
    },
    JsCache_fetch: function(cache, key) {
      return cache[key];
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$as(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (!H._isInt(index))
        return P.ArgumentError$value(index, _s5_, null);
      $length = H._asInt(J.get$length$as(indexable));
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    stringLastIndexOfUnchecked: function(receiver, element, start) {
      return receiver.lastIndexOf(element, start);
    },
    argumentErrorValue: function(object) {
      return P.ArgumentError$value(object, null, null);
    },
    checkNull: function(object) {
      if (object == null)
        throw H.wrapException(H.argumentErrorValue(object));
      return object;
    },
    wrapException: function(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = P.NullThrownError$();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder$: function(_arguments, _argumentsExpr, _expr, _method, _receiver, _pattern) {
      return new H.TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver);
    },
    TypeErrorDecoder_buildJavaScriptObject: function() {
      return {
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_buildJavaScriptObjectWithNonClosure: function() {
      return {$method$: null,
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match;
      message = H._asString(H.quoteStringForRegExp(message.replace(String({}), '$receiver$')));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], type$.JSArray_String);
      return H.TypeErrorDecoder$(match.indexOf("\\$arguments\\$"), match.indexOf("\\$argumentsExpr\\$"), match.indexOf("\\$expr\\$"), match.indexOf("\\$method\\$"), match.indexOf("\\$receiver\\$"), message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'));
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokeCallErrorOnNull: function() {
      return function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
      return function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOnNull: function() {
      return function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
      return function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    UnknownJsTypeError$: function(_message) {
      return new H.UnknownJsTypeError(_message);
    },
    NullThrownFromJavaScriptException$: function(_irritant) {
      return new H.NullThrownFromJavaScriptException(_irritant);
    },
    ExceptionAndStackTrace$: function(dartException, stackTrace) {
      return new H.ExceptionAndStackTrace(dartException, stackTrace);
    },
    unwrapException: function(ex) {
      if (ex == null)
        return H.NullThrownFromJavaScriptException$(ex);
      if (ex instanceof H.ExceptionAndStackTrace)
        return H.saveStackTrace(ex, type$.Object._as(ex.dartException));
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return H.saveStackTrace(ex, ex.dartException);
      return H._unwrapNonDartException(ex);
    },
    saveStackTrace: function(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t1;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return H.saveStackTrace(ex, H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1)
              return H.saveStackTrace(ex, H.NullError$(H._asString(message), match));
          }
        }
        return H.saveStackTrace(ex, H.UnknownJsTypeError$(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && H.boolConversionCheck(H.contains(message, "call stack")))
          return P.StackOverflowError$();
        message = H.tryStringifyException(ex);
        return H.saveStackTrace(ex, P.ArgumentError$(typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return P.StackOverflowError$();
      return ex;
    },
    tryStringifyException: function(ex) {
      return function(ex) {
        try {
          return String(ex);
        } catch (e) {
        }
        return null;
      }(ex);
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return H._StackTrace$(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = H._StackTrace$(exception);
    },
    _StackTrace$: function(_exception) {
      return new H._StackTrace(_exception);
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, applyTrampoline, i, stub, stubCallName,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(H.StaticClosure$().constructor.prototype) : Object.create(H.BoundClosure$(null, null, null, "").constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else if (H.boolConversionCheck(H.Closure_isCsp())) {
        t1 = function tear_off(a, b, c, d) {
          this.$initialize(a, b, c, d);
        };
        $constructor = t1;
      } else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      type$.Object._as(reflectionInfo);
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_isCsp: function() {
      return false;
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      if (H.boolConversionCheck(H.Closure_isCsp()) || !t1 || arity >= 27)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + H.S(t1);
        return new Function("return function(){var " + selfName + " = this." + H.S(H.BoundClosure_selfFieldName()) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += H.S(t1);
      return new Function("return function(" + $arguments + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var $arguments,
        selfField = H.BoundClosure_selfFieldName(),
        receiverField = H.BoundClosure_receiverFieldName(),
        stubName = $function.$stubName,
        arity = $function.length,
        lookedUpFunction = receiver[stubName],
        t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction,
        t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    StaticClosure$: function() {
      return new H.StaticClosure();
    },
    BoundClosure$: function(_self, _target, _receiver, _name) {
      return new H.BoundClosure(_self, _target, _receiver, _name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H.evalInInstance(type$.BoundClosure._as(closure)._self, H._asString(recipe));
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H.evalInInstance(type$.BoundClosure._as(closure)._receiver, H._asString(recipe));
    },
    BoundClosure_selfOf: function(closure) {
      return type$.BoundClosure._as(closure)._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return type$.BoundClosure._as(closure)._receiver;
    },
    BoundClosure_selfFieldName: function() {
      var t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t1.toString;
      return t1;
    },
    BoundClosure_receiverFieldName: function() {
      var t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      t1.toString;
      return t1;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = H.BoundClosure$("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found."));
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    checkDeferredIsLoaded: function(loadId) {
      if (!H.boolConversionCheck(J.contains$1$z($.$get$_loadedLibraries(), loadId)))
        throw H.wrapException(H.DeferredNotLoadedError$(loadId));
    },
    assertThrow: function(message) {
      throw H.wrapException(H._AssertionError$(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(P.CyclicInitializationError$(staticName));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    DeferredNotLoadedError$: function(libraryName) {
      return new H.DeferredNotLoadedError(libraryName);
    },
    jsonEncodeNative: function(string) {
      return JSON.stringify(string);
    },
    loadDeferredLibrary: function(loadId) {
      var t1, uris, hashes, index2uri, index2hash, i, index, total, waitingForLoad, isHunkLoaded, _box_0 = {},
        indexes = init.deferredLibraryParts[loadId];
      if (indexes == null)
        return P.Future_Future$value(null, type$.Null);
      t1 = type$.JSArray_String;
      uris = H.setRuntimeTypeInfo([], t1);
      hashes = H.setRuntimeTypeInfo([], t1);
      index2uri = init.deferredPartUris;
      index2hash = init.deferredPartHashes;
      for (i = 0; i < indexes.length; ++i) {
        index = indexes[i];
        C.JSArray_methods.add$1(uris, index2uri[index]);
        C.JSArray_methods.add$1(hashes, index2hash[index]);
      }
      total = hashes.length;
      waitingForLoad = P.List_List$filled(total, true, type$.bool);
      _box_0.nextHunkToInitialize = 0;
      isHunkLoaded = init.isHunkLoaded;
      t1 = new H.loadDeferredLibrary_initializeSomeLoadedHunks(_box_0, total, waitingForLoad, uris, hashes, init.isHunkInitialized, isHunkLoaded, init.initializeLoadedHunk);
      return P.Future_wait(P.List_List$generate(total, new H.loadDeferredLibrary_loadAndInitialize(isHunkLoaded, hashes, waitingForLoad, uris, t1), type$.Future_dynamic), type$.dynamic).then$1$1(new H.loadDeferredLibrary_closure(_box_0, t1, total, loadId), type$.Null);
    },
    _computeCspNonce: function() {
      var nonce,
        currentScript = init.currentScript;
      if (currentScript == null)
        return null;
      nonce = currentScript.nonce;
      return nonce != null && nonce !== "" ? nonce : currentScript.getAttribute("nonce");
    },
    _computeCrossOrigin: function() {
      var currentScript = init.currentScript;
      if (currentScript == null)
        return null;
      return currentScript.crossOrigin;
    },
    _isWorker: function() {
      H.requiresPreamble();
      return !self.window && !!self.postMessage;
    },
    _computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (H.boolConversionCheck(H._isWorker()))
        return H._computeThisScriptFromTrace();
      return null;
    },
    _computeThisScriptFromTrace: function() {
      var matches,
        stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(P.UnsupportedError$("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(P.UnsupportedError$('Cannot extract URI from "' + stack + '"'));
    },
    _loadHunk: function(hunkName) {
      var deferredLibraryLoader, failure, jsSuccess, jsFailure, error, stackTrace, t4, uri, completer, exception, index, xhr, script, t1 = {},
        t2 = J.getInterceptor$a($._loadingLibraries),
        future = t2.$index($._loadingLibraries, hunkName),
        t3 = J.getInterceptor$a($._eventLog);
      t3.add$1($._eventLog, " - _loadHunk: " + hunkName);
      if (future != null) {
        t3.add$1($._eventLog, "reuse: " + hunkName);
        return future.then$1$1(new H._loadHunk_closure(), type$.Null);
      }
      t4 = $.$get$thisScript();
      t4.toString;
      t1.uri = t4;
      uri = H.S(C.JSString_methods.substring$2(t4, 0, C.JSString_methods.lastIndexOf$1(t4, "/") + 1)) + hunkName;
      t1.uri = uri;
      t3.add$1($._eventLog, " - download: " + hunkName + " from " + uri);
      deferredLibraryLoader = self.dartDeferredLibraryLoader;
      completer = P.Completer_Completer(type$.Null);
      t3 = new H._loadHunk_success(hunkName, completer);
      failure = new H._loadHunk_failure(t1, hunkName, completer);
      jsSuccess = H.convertDartClosureToJS(t3, 0);
      jsFailure = H.convertDartClosureToJS(new H._loadHunk_closure0(failure), 1);
      if (typeof deferredLibraryLoader === "function")
        try {
          deferredLibraryLoader(t1.uri, jsSuccess, jsFailure);
        } catch (exception) {
          error = H.unwrapException(exception);
          stackTrace = H.getTraceFromException(exception);
          failure.call$3(error, "invoking dartDeferredLibraryLoader hook", stackTrace);
        }
      else if (H.boolConversionCheck(H._isWorker())) {
        index = J.lastIndexOf$1$s(t1.uri, "/");
        t1.uri = H.S(J.substring$2$s(t1.uri, 0, index + 1)) + hunkName;
        xhr = new XMLHttpRequest();
        xhr.open("GET", t1.uri);
        xhr.addEventListener("load", H.convertDartClosureToJS(new H._loadHunk_closure1(xhr, failure, t3), 1), false);
        xhr.addEventListener("error", new H._loadHunk_closure2(failure), false);
        xhr.addEventListener("abort", new H._loadHunk_closure3(failure), false);
        xhr.send();
      } else {
        script = document.createElement("script");
        script.type = "text/javascript";
        script.src = t1.uri;
        t1 = $.$get$_cspNonce();
        if (t1 != null && !H.boolConversionCheck(J.$eq$(t1, ""))) {
          script.nonce = $.$get$_cspNonce();
          script.setAttribute("nonce", $.$get$_cspNonce());
        }
        t1 = $.$get$_crossOrigin();
        if (t1 != null && !H.boolConversionCheck(J.$eq$(t1, "")))
          script.crossOrigin = $.$get$_crossOrigin();
        script.addEventListener("load", jsSuccess, false);
        script.addEventListener("error", jsFailure, false);
        document.body.appendChild(script);
      }
      t2.$indexSet($._loadingLibraries, hunkName, completer.get$future());
      return completer.get$future();
    },
    _AssertionError$: function(message) {
      return new H._AssertionError(message);
    },
    JsLinkedHashMap$: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
      var t1 = H.JsLinkedHashMap$($K, $V);
      return t1;
    },
    JsLinkedHashMap__isStringKey: function(key) {
      return typeof key == "string";
    },
    JsLinkedHashMap__isNumericKey: function(key) {
      return typeof key == "number" && (key & 0x3ffffff) === key;
    },
    LinkedHashMapCell$: function(hashMapCellKey, hashMapCellValue) {
      return new H.LinkedHashMapCell(hashMapCellKey, hashMapCellValue);
    },
    LinkedHashMapKeyIterable$: function(_map, $E) {
      return new H.LinkedHashMapKeyIterable(_map, $E._eval$1("LinkedHashMapKeyIterable<0>"));
    },
    LinkedHashMapKeyIterator$: function(_map, _modifications, $E) {
      var t1 = new H.LinkedHashMapKeyIterator(_map, _modifications, $E._eval$1("LinkedHashMapKeyIterator<0>"));
      t1.LinkedHashMapKeyIterator$2(_map, _modifications, $E);
      return t1;
    },
    contains: function(userAgent, $name) {
      return userAgent.indexOf($name) !== -1;
    },
    constructorNameFallback: function(object) {
      return C.C_JS_CONST(object);
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    DeferredNotLoadedError: function DeferredNotLoadedError(t0) {
      this.libraryName = t0;
    },
    loadDeferredLibrary_initializeSomeLoadedHunks: function loadDeferredLibrary_initializeSomeLoadedHunks(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.total = t1;
      _.waitingForLoad = t2;
      _.uris = t3;
      _.hashes = t4;
      _.isHunkInitialized = t5;
      _.isHunkLoaded = t6;
      _.initializer = t7;
    },
    loadDeferredLibrary_loadAndInitialize: function loadDeferredLibrary_loadAndInitialize(t0, t1, t2, t3, t4) {
      var _ = this;
      _.isHunkLoaded = t0;
      _.hashes = t1;
      _.waitingForLoad = t2;
      _.uris = t3;
      _.initializeSomeLoadedHunks = t4;
    },
    loadDeferredLibrary_loadAndInitialize_closure: function loadDeferredLibrary_loadAndInitialize_closure(t0, t1, t2) {
      this.waitingForLoad = t0;
      this.i = t1;
      this.initializeSomeLoadedHunks = t2;
    },
    loadDeferredLibrary_closure: function loadDeferredLibrary_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.initializeSomeLoadedHunks = t1;
      _.total = t2;
      _.loadId = t3;
    },
    _loadHunk_closure: function _loadHunk_closure() {
    },
    _loadHunk_success: function _loadHunk_success(t0, t1) {
      this.hunkName = t0;
      this.completer = t1;
    },
    _loadHunk_failure: function _loadHunk_failure(t0, t1, t2) {
      this._box_0 = t0;
      this.hunkName = t1;
      this.completer = t2;
    },
    _loadHunk_closure0: function _loadHunk_closure0(t0) {
      this.failure = t0;
    },
    _loadHunk_closure1: function _loadHunk_closure1(t0, t1, t2) {
      this.xhr = t0;
      this.failure = t1;
      this.success = t2;
    },
    _loadHunk_closure2: function _loadHunk_closure2(t0) {
      this.failure = t0;
    },
    _loadHunk_closure3: function _loadHunk_closure3(t0) {
      this.failure = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this.__js_helper$_next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_current = _.__js_helper$_cell = null;
      _.$ti = t2;
    },
    Rti$: function() {
      return new H.Rti(null, null);
    },
    Rti__setAsCheckFunction: function(rti, fn) {
      rti._as = fn;
    },
    Rti__setIsTestFunction: function(rti, fn) {
      rti._is = fn;
    },
    Rti__asCheck: function(rti, object) {
      return rti._as(object);
    },
    Rti__isCheck: function(rti, object) {
      return rti._is(object);
    },
    Rti__getPrecomputed1: function(rti) {
      return rti._precomputed1;
    },
    Rti__setPrecomputed1: function(rti, precomputed) {
      rti._precomputed1 = precomputed;
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = H._Utils_asRtiOrNull(H.Rti__getPrecomputed1(rti));
      if (question == null) {
        question = H._Universe__lookupQuestionRti(universe, H.Rti__getStarArgument(rti), true);
        H.Rti__setPrecomputed1(rti, question);
      }
      return question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = H._Utils_asRtiOrNull(H.Rti__getPrecomputed1(rti));
      if (future == null) {
        future = H._Universe__lookupFutureRti(universe, H.Rti__getFutureOrArgument(rti));
        H.Rti__setPrecomputed1(rti, future);
      }
      return future;
    },
    Rti__getSpecializedTestResource: function(rti) {
      return rti._specializedTestResource;
    },
    Rti__setSpecializedTestResource: function(rti, value) {
      rti._specializedTestResource = value;
    },
    Rti__getKind: function(rti) {
      return H._Utils_asInt(rti._kind);
    },
    Rti__setKind: function(rti, kind) {
      rti._kind = kind;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = H.Rti__getKind(rti);
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(H._Utils_asRti(H.Rti__getPrimary(rti)));
      return kind === 11 || kind === 12;
    },
    Rti__getPrimary: function(rti) {
      return rti._primary;
    },
    Rti__setPrimary: function(rti, value) {
      rti._primary = value;
    },
    Rti__getRest: function(rti) {
      return rti._rest;
    },
    Rti__setRest: function(rti, value) {
      rti._rest = value;
    },
    Rti__getInterfaceName: function(rti) {
      return H._Utils_asString(H.Rti__getPrimary(rti));
    },
    Rti__getInterfaceTypeArguments: function(rti) {
      return H.Rti__getRest(rti);
    },
    Rti__getBindingBase: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getBindingArguments: function(rti) {
      return H.Rti__getRest(rti);
    },
    Rti__getStarArgument: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getQuestionArgument: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getFutureOrArgument: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getReturnType: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getFunctionParameters: function(rti) {
      return H.Rti__getRest(rti);
    },
    Rti__getGenericFunctionBase: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getGenericFunctionBounds: function(rti) {
      return H.Rti__getRest(rti);
    },
    Rti__getGenericFunctionParameterIndex: function(rti) {
      return H._Utils_asInt(H.Rti__getPrimary(rti));
    },
    Rti__getEvalCache: function(rti) {
      return rti._evalCache;
    },
    Rti__setEvalCache: function(rti, value) {
      rti._evalCache = value;
    },
    Rti__getBindCache: function(rti) {
      return rti._bindCache;
    },
    Rti__setBindCache: function(rti, value) {
      rti._bindCache = value;
    },
    Rti_allocate: function() {
      return H.Rti$();
    },
    Rti__getCanonicalRecipe: function(rti) {
      return H._Utils_asString(rti._canonicalRecipe);
    },
    Rti__setCanonicalRecipe: function(rti, s) {
      rti._canonicalRecipe = s;
    },
    _FunctionParameters$: function() {
      return new H._FunctionParameters();
    },
    _FunctionParameters_allocate: function() {
      return H._FunctionParameters$();
    },
    _FunctionParameters__getRequiredPositional: function(parameters) {
      return parameters._requiredPositional;
    },
    _FunctionParameters__setRequiredPositional: function(parameters, requiredPositional) {
      parameters._requiredPositional = requiredPositional;
    },
    _FunctionParameters__getOptionalPositional: function(parameters) {
      return parameters._optionalPositional;
    },
    _FunctionParameters__setOptionalPositional: function(parameters, optionalPositional) {
      parameters._optionalPositional = optionalPositional;
    },
    _FunctionParameters__getNamed: function(parameters) {
      return parameters._named;
    },
    _FunctionParameters__setNamed: function(parameters, named) {
      parameters._named = named;
    },
    _theUniverse: function() {
      return init.typeUniverse;
    },
    _rtiEval: function(environment, recipe) {
      return H._Universe_evalInEnvironment(H._theUniverse(), environment, recipe);
    },
    _rtiBind: function(environment, types) {
      return H._Universe_bind(H._theUniverse(), environment, types);
    },
    findType: function(recipe) {
      return H._Universe_eval(H._theUniverse(), recipe, false);
    },
    evalInInstance: function(instance, recipe) {
      return H._rtiEval(H.instanceType(instance), recipe);
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, t1, substitutedBounds, index, argument,
        kind = H.Rti__getKind(rti);
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = H._Utils_asRti(H.Rti__getPrimary(rti));
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = H._Utils_asRti(H.Rti__getPrimary(rti));
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = H._Utils_asRti(H.Rti__getPrimary(rti));
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = H.Rti__getInterfaceTypeArguments(rti);
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedInterfaceTypeArguments, interfaceTypeArguments)))
            return rti;
          return H._Universe__lookupInterfaceRti(universe, H.Rti__getInterfaceName(rti), substitutedInterfaceTypeArguments);
        case 10:
          base = H.Rti__getBindingBase(rti);
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = H.Rti__getBindingArguments(rti);
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBase, base)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedArguments, $arguments)))
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = H.Rti__getReturnType(rti);
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = H.Rti__getFunctionParameters(rti);
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedReturnType, returnType)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedFunctionParameters, functionParameters)))
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = H.Rti__getGenericFunctionBounds(rti);
          t1 = H._Utils_arrayLength(bounds);
          if (typeof t1 !== "number")
            return H.iae(t1);
          depth += t1;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = H.Rti__getGenericFunctionBase(rti);
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBounds, bounds)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedBase, base)))
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = H.Rti__getGenericFunctionParameterIndex(rti);
          if (index < depth)
            return rti;
          argument = H._Utils_arrayAt(typeArguments, index - depth);
          if (argument == null)
            return rti;
          return H._Utils_asRti(argument);
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + H.S(kind)));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = H._Utils_arrayLength(rtiArray),
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = H._Utils_asRti(H._Utils_arrayAt(rtiArray, i));
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (H.boolConversionCheck(H._Utils_isNotIdentical(substitutedRti, rti)))
          changed = true;
        H._Utils_arrayPush(result, substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, $name, isRequired, rti, substitutedRti,
        $length = H._Utils_arrayLength(namedArray),
        result = [];
      for (changed = false, i = 0; i < $length; i += 3) {
        $name = H._Utils_asString(H._Utils_arrayAt(namedArray, i));
        isRequired = H._Utils_asBool(H._Utils_arrayAt(namedArray, i + 1));
        rti = H._Utils_asRti(H._Utils_arrayAt(namedArray, i + 2));
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (H.boolConversionCheck(H._Utils_isNotIdentical(substitutedRti, rti)))
          changed = true;
        H._Utils_arrayPush(result, $name);
        H._Utils_arrayPush(result, isRequired);
        H._Utils_arrayPush(result, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = H._FunctionParameters__getRequiredPositional(functionParameters),
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = H._FunctionParameters__getOptionalPositional(functionParameters),
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = H._FunctionParameters__getNamed(functionParameters),
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (H.boolConversionCheck(H._Utils_isIdentical(substitutedRequiredPositional, requiredPositional)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedOptionalPositional, optionalPositional)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedNamed, named)))
        return functionParameters;
      result = H._FunctionParameters_allocate();
      H._FunctionParameters__setRequiredPositional(result, substitutedRequiredPositional);
      H._FunctionParameters__setOptionalPositional(result, substitutedOptionalPositional);
      H._FunctionParameters__setNamed(result, substitutedNamed);
      return result;
    },
    _isDartObject: function(object) {
      return H._Utils_instanceOf(object, P.Object);
    },
    _isClosure: function(object) {
      return H._Utils_instanceOf(object, H.Closure);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(H._Utils_asInt(signature));
        return H._Utils_asRti(closure.$signature());
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.boolConversionCheck(H.Rti__isUnionOfFunctionType(testRti)))
        if (H.boolConversionCheck(H._isClosure(object))) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      if (H.boolConversionCheck(H._isDartObject(object)))
        return H._instanceType(object);
      if (H.boolConversionCheck(H._Utils_isArray(object)))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return H._Utils_asRti(defaultRti);
      if (rti.constructor !== defaultRti.constructor)
        return H._Utils_asRti(defaultRti);
      return H._Utils_asRti(rti);
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? H._Utils_asRti(rti) : H._instanceTypeFromConstructor(object);
    },
    instanceTypeName: function(object) {
      return H._rtiToString(H.instanceType(object), null);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = H.boolConversionCheck(H._isClosure(instance)) ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(H._theUniverse(), effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable: function(index) {
      var table, type, rti;
      H._asInt(index);
      table = init.types;
      type = H._Utils_arrayAt(table, index);
      if (H.boolConversionCheck(H._Utils_isString(type))) {
        rti = H.findType(H._Utils_asString(type));
        H._Utils_arraySetAt(table, index, rti);
        return rti;
      }
      return H._Utils_asRti(type);
    },
    _installSpecializedIsTest: function(object) {
      var unstarred, isFn, $name,
        testRti = H._Utils_asRti(this);
      if (H.boolConversionCheck(H.isObjectType(testRti)))
        return H._finishIsFn(testRti, object, H._isObject);
      if (H.boolConversionCheck(H.isTopType(testRti)))
        return H._finishIsFn(testRti, object, H._isTop);
      unstarred = H.boolConversionCheck(J.$eq$(H.Rti__getKind(testRti), 6)) ? H.Rti__getStarArgument(testRti) : testRti;
      isFn = H._simpleSpecializedIsTest(unstarred);
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (H.boolConversionCheck(J.$eq$(H.Rti__getKind(unstarred), 9))) {
        $name = H.Rti__getInterfaceName(unstarred);
        if (H.Rti__getInterfaceTypeArguments(unstarred).every(H.isTopType)) {
          H.Rti__setSpecializedTestResource(testRti, "$is" + $name);
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (H.boolConversionCheck(J.$eq$(H.Rti__getKind(testRti), 7)))
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn: function(testRti, object, isFn) {
      H.Rti__setIsTestFunction(testRti, isFn);
      return H.Rti__isCheck(testRti, object);
    },
    _simpleSpecializedIsTest: function(testRti) {
      var isFn;
      if (H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.int)))
        isFn = H._isInt;
      else if (H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.double)) || H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.num)))
        isFn = H._isNum;
      else if (H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.String)))
        isFn = H._isString;
      else
        isFn = H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.bool)) ? H._isBool : null;
      return isFn;
    },
    _installSpecializedAsCheck: function(object) {
      var t1,
        testRti = H._Utils_asRti(this),
        asFn = H._generalAsCheckImplementation;
      if (H.boolConversionCheck(H.isTopType(testRti)))
        asFn = H._asTop;
      else if (H.boolConversionCheck(H.isObjectType(testRti)))
        asFn = H._asObject;
      else {
        t1 = H.boolConversionCheck(H.isNullable(testRti));
        if (t1)
          asFn = H._generalNullableAsCheckImplementation;
      }
      H.Rti__setAsCheckFunction(testRti, asFn);
      return H.Rti__asCheck(testRti, object);
    },
    _nullIs: function(testRti) {
      var kind = H.Rti__getKind(testRti);
      return H.boolConversionCheck(H.isTopType(testRti)) || H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.legacy_Never)) || kind === 7 || H.boolConversionCheck(H.isNullType(testRti));
    },
    _generalIsTestImplementation: function(object) {
      var objectRti,
        testRti = H._Utils_asRti(this);
      if (object == null)
        return H._nullIs(testRti);
      objectRti = H.instanceOrFunctionType(object, testRti);
      return H.isSubtype(H._theUniverse(), objectRti, testRti);
    },
    _generalNullableIsTestImplementation: function(object) {
      if (object == null)
        return true;
      return H.Rti__isCheck(H.Rti__getQuestionArgument(H._Utils_asRti(this)), object);
    },
    _isTestViaProperty: function(object) {
      var tag,
        testRti = H._Utils_asRti(this);
      if (object == null)
        return H._nullIs(testRti);
      tag = H.Rti__getSpecializedTestResource(testRti);
      if (H.boolConversionCheck(H._isDartObject(object)))
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var t1,
        testRti = H._Utils_asRti(this);
      if (object == null) {
        t1 = H.boolConversionCheck(H.isNullable(testRti));
        if (t1)
          return object;
      } else if (H.boolConversionCheck(H.Rti__isCheck(testRti, object)))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation: function(object) {
      var testRti = H._Utils_asRti(this);
      if (object == null)
        return object;
      else if (H.boolConversionCheck(H.Rti__isCheck(testRti, object)))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck: function(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return H._TypeError$fromMessage(H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return object != null;
    },
    _asObject: function(object) {
      if (object != null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asDouble(object);
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asDouble(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asDouble(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (H.boolConversionCheck(H._isInt(object)))
        return H._Utils_asInt(object);
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (H.boolConversionCheck(H._isInt(object)))
        return H._Utils_asInt(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (H.boolConversionCheck(H._isInt(object)))
        return H._Utils_asInt(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asNum(object);
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asNum(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asNum(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (H.boolConversionCheck(H._isString(object)))
        return H._Utils_asString(object);
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (H.boolConversionCheck(H._isString(object)))
        return H._Utils_asString(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (H.boolConversionCheck(H._isString(object)))
        return H._Utils_asString(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var t1, s = "", sep = "", i = 0;
      while (true) {
        t1 = H._Utils_arrayLength(array);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        s = C.JSString_methods.$add(s, C.JSString_methods.$add(sep, H._rtiToString(H._Utils_asRti(H._Utils_arrayAt(array, i)), genericContext)));
        ++i;
        sep = ", ";
      }
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, typeParametersText, typeSep, t1, t2, boundRti, returnType, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = H._Utils_arrayLength(bounds);
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t1 = genericContext.length;
          t2 = t1 - 1 - i;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t2]);
          boundRti = H._Utils_asRti(H._Utils_arrayAt(bounds, i));
          if (!H.boolConversionCheck(H.isTopType(boundRti)))
            typeParametersText = C.JSString_methods.$add(typeParametersText, C.JSString_methods.$add(" extends ", H._rtiToString(boundRti, genericContext)));
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      returnType = H.Rti__getReturnType(functionType);
      parameters = H.Rti__getFunctionParameters(functionType);
      requiredPositional = H._FunctionParameters__getRequiredPositional(parameters);
      requiredPositionalLength = H._Utils_arrayLength(requiredPositional);
      optionalPositional = H._FunctionParameters__getOptionalPositional(parameters);
      optionalPositionalLength = H._Utils_arrayLength(optionalPositional);
      named = H._FunctionParameters__getNamed(parameters);
      namedLength = H._Utils_arrayLength(named);
      returnTypeText = H._rtiToString(returnType, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText = C.JSString_methods.$add(argumentsText, C.JSString_methods.$add(sep, H._rtiToString(H._Utils_asRti(H._Utils_arrayAt(requiredPositional, i)), genericContext)));
      if (optionalPositionalLength > 0) {
        argumentsText = C.JSString_methods.$add(argumentsText, sep + "[");
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText = C.JSString_methods.$add(argumentsText, C.JSString_methods.$add(sep, H._rtiToString(H._Utils_asRti(H._Utils_arrayAt(optionalPositional, i)), genericContext)));
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText = C.JSString_methods.$add(argumentsText, sep + "{");
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (H.boolConversionCheck(H._Utils_asBool(H._Utils_arrayAt(named, i + 1))))
            argumentsText += "required ";
          argumentsText = C.JSString_methods.$add(argumentsText, J.$add$ns(J.$add$ns(H._rtiToString(H._Utils_asRti(H._Utils_arrayAt(named, i + 2)), genericContext), " "), H._Utils_asString(H._Utils_arrayAt(named, i))));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, index, t1, t2,
        kind = H.Rti__getKind(rti);
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(H.Rti__getStarArgument(rti), genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = H.Rti__getQuestionArgument(rti);
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = H.Rti__getKind(questionArgument);
        return (argumentKind === 11 || argumentKind === 12 ? J.$add$ns("(" + s, ")") : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + H.S(H._rtiToString(H.Rti__getFutureOrArgument(rti), genericContext)) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(H.Rti__getInterfaceName(rti));
        $arguments = H.Rti__getInterfaceTypeArguments(rti);
        return $arguments.length !== 0 ? C.JSString_methods.$add($name, J.$add$ns(C.JSString_methods.$add("<", H._rtiArrayToString($arguments, genericContext)), ">")) : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(H.Rti__getGenericFunctionBase(rti), genericContext, H.Rti__getGenericFunctionBounds(rti));
      if (kind === 13) {
        genericContext.toString;
        index = H.Rti__getGenericFunctionParameterIndex(rti);
        t1 = genericContext.length;
        t2 = t1 - 1 - index;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return genericContext[t2];
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_evalCache: function(universe) {
      return universe.eC;
    },
    _Universe_typeRules: function(universe) {
      return universe.tR;
    },
    _Universe_erasedTypes: function(universe) {
      return universe.eT;
    },
    _Universe__findRule: function(universe, targetType) {
      return H._Universe_typeRules(universe)[targetType];
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = H._Universe__findRule(universe, targetType);
      for (; H.boolConversionCheck(H._Utils_isString(rule));)
        rule = H._Universe__findRule(universe, H._Utils_asString(rule));
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        metadata = H._Universe_erasedTypes(universe),
        probe = metadata[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (H.boolConversionCheck(H._Utils_isNum(probe))) {
        $length = H._Utils_asInt(probe);
        erased = H._Universe__lookupErasedRti(universe);
        $arguments = [];
        for (i = 0; i < $length; ++i)
          H._Utils_arrayPush($arguments, erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        metadata[cls] = $interface;
        return $interface;
      } else
        return H._Utils_asRti(probe);
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(H._Universe_typeRules(universe), rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(H._Universe_erasedTypes(universe), types);
    },
    _Universe_sharedEmptyArray: function(universe) {
      return universe.sEA;
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        cache = H._Universe_evalCache(universe),
        probe = H._Utils_mapGet(cache, recipe);
      if (probe != null)
        return H._Utils_asRti(probe);
      rti = H._Universe__parseRecipe(universe, null, recipe, normalize);
      H._Utils_mapSet(cache, recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = H.Rti__getEvalCache(environment);
      if (cache == null) {
        cache = new Map();
        H.Rti__setEvalCache(environment, cache);
      }
      probe = H._Utils_mapGet(cache, recipe);
      if (probe != null)
        return H._Utils_asRti(probe);
      rti = H._Universe__parseRecipe(universe, environment, recipe, true);
      H._Utils_mapSet(cache, recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = H.Rti__getBindCache(environment);
      if (cache == null) {
        cache = new Map();
        H.Rti__setBindCache(environment, cache);
      }
      argumentsRecipe = H.Rti__getCanonicalRecipe(argumentsRti);
      probe = H._Utils_mapGet(cache, argumentsRecipe);
      if (probe != null)
        return H._Utils_asRti(probe);
      rti = H._Universe__lookupBindingRti(universe, environment, H.boolConversionCheck(J.$eq$(H.Rti__getKind(argumentsRti), 10)) ? H.Rti__getBindingArguments(argumentsRti) : [argumentsRti]);
      H._Utils_mapSet(cache, argumentsRecipe, rti);
      return rti;
    },
    _Universe_evalTypeVariable: function(universe, environment, $name) {
      var recipe;
      if (H.Rti__getKind(environment) === 10)
        environment = H.Rti__getBindingBase(environment);
      recipe = H.TypeRule_lookupTypeVariable(H._Universe_findRule(universe, H.Rti__getInterfaceName(environment)), $name);
      if (recipe == null)
        throw H.wrapException('No "' + $name + '" in "' + H.S(H.Rti__getCanonicalRecipe(environment)) + '"');
      return H._Universe_evalInEnvironment(universe, environment, recipe);
    },
    _Universe__parseRecipe: function(universe, environment, recipe, normalize) {
      return H._Parser_parse(H._Parser_create(universe, environment, recipe, normalize));
    },
    _Universe__installTypeTests: function(universe, rti) {
      H.Rti__setAsCheckFunction(rti, H._installSpecializedAsCheck);
      H.Rti__setIsTestFunction(rti, H._installSpecializedIsTest);
      return rti;
    },
    _Universe__installRti: function(universe, key, rti) {
      H._Utils_mapSet(H._Universe_evalCache(universe), key, rti);
      return rti;
    },
    _Universe__recipeJoin: function(s1, s2) {
      return s1 + s2;
    },
    _Universe__recipeJoin3: function(s1, s2, s3) {
      return s1 + (s2 + s3);
    },
    _Universe__recipeJoin4: function(s1, s2, s3, s4) {
      return s1 + (s2 + s3 + s4);
    },
    _Universe__recipeJoin5: function(s1, s2, s3, s4, s5) {
      return s1 + (s2 + s3 + s4 + s5);
    },
    _Universe__canonicalRecipeOfErased: function() {
      return "#";
    },
    _Universe__canonicalRecipeOfDynamic: function() {
      return "@";
    },
    _Universe__canonicalRecipeOfVoid: function() {
      return "~";
    },
    _Universe__canonicalRecipeOfNever: function() {
      return H._Universe__recipeJoin("0", "&");
    },
    _Universe__canonicalRecipeOfAny: function() {
      return H._Universe__recipeJoin("1", "&");
    },
    _Universe__canonicalRecipeOfStar: function(baseType) {
      return H._Universe__recipeJoin(H.Rti__getCanonicalRecipe(baseType), "*");
    },
    _Universe__canonicalRecipeOfQuestion: function(baseType) {
      return H._Universe__recipeJoin(H.Rti__getCanonicalRecipe(baseType), "?");
    },
    _Universe__canonicalRecipeOfFutureOr: function(baseType) {
      return H._Universe__recipeJoin(H.Rti__getCanonicalRecipe(baseType), "/");
    },
    _Universe__canonicalRecipeOfGenericFunctionParameter: function(index) {
      return H._Universe__recipeJoin(H.S(index), "^");
    },
    _Universe__lookupErasedRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 5, H._Universe__canonicalRecipeOfErased());
    },
    _Universe__lookupDynamicRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 2, H._Universe__canonicalRecipeOfDynamic());
    },
    _Universe__lookupVoidRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 3, H._Universe__canonicalRecipeOfVoid());
    },
    _Universe__lookupNeverRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 1, H._Universe__canonicalRecipeOfNever());
    },
    _Universe__lookupAnyRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 4, H._Universe__canonicalRecipeOfAny());
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createTerminalRti(universe, kind, key));
    },
    _Universe__createTerminalRti: function(universe, kind, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, kind);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var key = H._Universe__canonicalRecipeOfStar(baseType),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createStarRti(universe, baseType, key, normalize));
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, rti;
      if (normalize) {
        baseKind = H.Rti__getKind(baseType);
        if (H.boolConversionCheck(H.isStrongTopType(baseType)) || H.boolConversionCheck(H.isNullType(baseType)) || baseKind === 7 || baseKind === 6)
          return baseType;
      }
      rti = H.Rti_allocate();
      H.Rti__setKind(rti, 6);
      H.Rti__setPrimary(rti, baseType);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var key = H._Universe__canonicalRecipeOfQuestion(baseType),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createQuestionRti(universe, baseType, key, normalize));
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = H.Rti__getKind(baseType);
        if (!H.boolConversionCheck(H.isStrongTopType(baseType)))
          if (!H.boolConversionCheck(H.isNullType(baseType)))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.boolConversionCheck(H.isNullable(H.Rti__getFutureOrArgument(baseType)));
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || H.boolConversionCheck(H._Utils_isIdentical(baseType, type$.legacy_Never)))
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = H.Rti__getStarArgument(baseType);
          if (H.Rti__getKind(starArgument) === 8 && H.boolConversionCheck(H.isNullable(H.Rti__getFutureOrArgument(starArgument))))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = H.Rti_allocate();
      H.Rti__setKind(rti, 7);
      H.Rti__setPrimary(rti, baseType);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var key = H._Universe__canonicalRecipeOfFutureOr(baseType),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createFutureOrRti(universe, baseType, key, normalize));
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var baseKind, rti;
      if (normalize) {
        baseKind = H.Rti__getKind(baseType);
        if (H.boolConversionCheck(H.isTopType(baseType)) || H.boolConversionCheck(H.isObjectType(baseType)))
          return baseType;
        else if (baseKind === 1)
          return H._Universe__lookupFutureRti(universe, baseType);
        else if (H.boolConversionCheck(H.isNullType(baseType)))
          return type$.nullable_Future_Null;
      }
      rti = H.Rti_allocate();
      H.Rti__setKind(rti, 8);
      H.Rti__setPrimary(rti, baseType);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var key = H._Universe__canonicalRecipeOfGenericFunctionParameter(index),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createGenericFunctionParameterRti(universe, index, key));
    },
    _Universe__createGenericFunctionParameterRti: function(universe, index, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, 13);
      H.Rti__setPrimary(rti, index);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = H._Utils_arrayLength($arguments);
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s = H._Universe__recipeJoin3(s, sep, H.Rti__getCanonicalRecipe(H._Utils_asRti(H._Utils_arrayAt($arguments, i))));
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, $name, nameSep,
        $length = H._Utils_arrayLength($arguments);
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        $name = H._Utils_asString(H._Utils_arrayAt($arguments, i));
        nameSep = H._Utils_asBool(H._Utils_arrayAt($arguments, i + 1)) ? "!" : ":";
        s = H._Universe__recipeJoin5(s, sep, $name, nameSep, H.Rti__getCanonicalRecipe(H._Utils_asRti(H._Utils_arrayAt($arguments, i + 2))));
      }
      return s;
    },
    _Universe__canonicalRecipeOfInterface: function($name, $arguments) {
      var s = H._Utils_asString($name);
      return H._Utils_arrayLength($arguments) !== 0 ? H._Universe__recipeJoin4(s, "<", H._Universe__canonicalRecipeJoin($arguments), ">") : s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var key = H._Universe__canonicalRecipeOfInterface($name, $arguments),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createInterfaceRti(universe, $name, $arguments, key));
    },
    _Universe__createInterfaceRti: function(universe, $name, typeArguments, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, 9);
      H.Rti__setPrimary(rti, $name);
      H.Rti__setRest(rti, typeArguments);
      if (H._Utils_arrayLength(typeArguments) > 0)
        H.Rti__setPrecomputed1(rti, H._Utils_arrayAt(typeArguments, 0));
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureRti: function(universe, base) {
      return H._Universe__lookupInterfaceRti(universe, "Future", [base]);
    },
    _Universe__canonicalRecipeOfBinding: function(base, $arguments) {
      return H._Universe__recipeJoin5(H.Rti__getCanonicalRecipe(base), ";", "<", H._Universe__canonicalRecipeJoin($arguments), ">");
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, key, probe;
      if (H.boolConversionCheck(J.$eq$(H.Rti__getKind(base), 10))) {
        newBase = H.Rti__getBindingBase(base);
        newArguments = H._Utils_arrayConcat(H.Rti__getBindingArguments(base), $arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = H._Universe__canonicalRecipeOfBinding(newBase, newArguments);
      probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createBindingRti(universe, newBase, newArguments, key));
    },
    _Universe__createBindingRti: function(universe, base, $arguments, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, 10);
      H.Rti__setPrimary(rti, base);
      H.Rti__setRest(rti, $arguments);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeOfFunction: function(returnType, parameters) {
      return H._Universe__recipeJoin(H.Rti__getCanonicalRecipe(returnType), H._Universe__canonicalRecipeOfFunctionParameters(parameters));
    },
    _Universe__canonicalRecipeOfFunctionParameters: function(parameters) {
      var sep,
        requiredPositional = H._FunctionParameters__getRequiredPositional(parameters),
        requiredPositionalLength = H._Utils_arrayLength(requiredPositional),
        optionalPositional = H._FunctionParameters__getOptionalPositional(parameters),
        optionalPositionalLength = H._Utils_arrayLength(optionalPositional),
        named = H._FunctionParameters__getNamed(parameters),
        namedLength = H._Utils_arrayLength(named),
        recipe = H._Universe__recipeJoin("(", H._Universe__canonicalRecipeJoin(requiredPositional));
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe = H._Universe__recipeJoin5(recipe, sep, "[", H._Universe__canonicalRecipeJoin(optionalPositional), "]");
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe = H._Universe__recipeJoin5(recipe, sep, "{", H._Universe__canonicalRecipeJoinNamed(named), "}");
      }
      return H._Universe__recipeJoin(recipe, ")");
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var key = H._Universe__canonicalRecipeOfFunction(returnType, parameters),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createFunctionRti(universe, returnType, parameters, key));
    },
    _Universe__createFunctionRti: function(universe, returnType, parameters, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, 11);
      H.Rti__setPrimary(rti, returnType);
      H.Rti__setRest(rti, parameters);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeOfGenericFunction: function(baseFunctionType, bounds) {
      return H._Universe__recipeJoin4(H.Rti__getCanonicalRecipe(baseFunctionType), "<", H._Universe__canonicalRecipeJoin(bounds), ">");
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var key = H._Universe__canonicalRecipeOfGenericFunction(baseFunctionType, bounds),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize));
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = H._Utils_arrayLength(bounds);
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = H._Utils_asRti(H._Utils_arrayAt(bounds, i));
          if (H.boolConversionCheck(J.$eq$(H.Rti__getKind(bound), 1))) {
            H._Utils_arraySetAt(typeArguments, i, bound);
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, H._Utils_isNotIdentical(bounds, substitutedBounds));
        }
      }
      rti = H.Rti_allocate();
      H.Rti__setKind(rti, 12);
      H.Rti__setPrimary(rti, baseFunctionType);
      H.Rti__setRest(rti, bounds);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_universe: function(parser) {
      return parser.u;
    },
    _Parser_environment: function(parser) {
      return parser.e;
    },
    _Parser_recipe: function(parser) {
      return parser.r;
    },
    _Parser_stack: function(parser) {
      return parser.s;
    },
    _Parser_position: function(parser) {
      return parser.p;
    },
    _Parser_setPosition: function(parser, p) {
      parser.p = p;
    },
    _Parser_normalize: function(parser) {
      return parser.n;
    },
    _Parser_charCodeAt: function(s, i) {
      return s.charCodeAt(i);
    },
    _Parser_push: function(stack, value) {
      stack.push(value);
    },
    _Parser_pop: function(stack) {
      return stack.pop();
    },
    _Parser_parse: function(parser) {
      var t1, i, ch, u, item,
        source = H._Parser_recipe(parser),
        stack = H._Parser_stack(parser);
      for (t1 = source.length, i = 0; i < t1;) {
        ch = H._Parser_charCodeAt(source, i);
        if (H.boolConversionCheck(H.Recipe_isDigit(ch)))
          i = H._Parser_handleDigit(i + 1, ch, source, stack);
        else if (H.boolConversionCheck(H.Recipe_isIdentifierStart(ch)))
          i = H._Parser_handleIdentifier(parser, i, source, stack, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, stack, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              H._Parser_push(stack, false);
              break;
            case 33:
              H._Parser_push(stack, true);
              break;
            case 59:
              H._Parser_push(stack, H._Parser_toType(H._Parser_universe(parser), H._Parser_environment(parser), H._Parser_pop(stack)));
              break;
            case 94:
              H._Parser_push(stack, H._Parser_toGenericFunctionParameter(H._Parser_universe(parser), H._Parser_pop(stack)));
              break;
            case 35:
              H._Parser_push(stack, H._Universe__lookupErasedRti(H._Parser_universe(parser)));
              break;
            case 64:
              H._Parser_push(stack, H._Universe__lookupDynamicRti(H._Parser_universe(parser)));
              break;
            case 126:
              H._Parser_push(stack, H._Universe__lookupVoidRti(H._Parser_universe(parser)));
              break;
            case 60:
              H._Parser_pushStackFrame(parser, stack);
              break;
            case 62:
              H._Parser_handleTypeArguments(parser, stack);
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, stack);
              break;
            case 42:
              u = H._Parser_universe(parser);
              H._Parser_push(stack, H._Universe__lookupStarRti(u, H._Parser_toType(u, H._Parser_environment(parser), H._Parser_pop(stack)), H._Parser_normalize(parser)));
              break;
            case 63:
              u = H._Parser_universe(parser);
              H._Parser_push(stack, H._Universe__lookupQuestionRti(u, H._Parser_toType(u, H._Parser_environment(parser), H._Parser_pop(stack)), H._Parser_normalize(parser)));
              break;
            case 47:
              u = H._Parser_universe(parser);
              H._Parser_push(stack, H._Universe__lookupFutureOrRti(u, H._Parser_toType(u, H._Parser_environment(parser), H._Parser_pop(stack)), H._Parser_normalize(parser)));
              break;
            case 40:
              H._Parser_pushStackFrame(parser, stack);
              break;
            case 41:
              H._Parser_handleFunctionArguments(parser, stack);
              break;
            case 91:
              H._Parser_pushStackFrame(parser, stack);
              break;
            case 93:
              H._Parser_handleOptionalGroup(parser, stack);
              break;
            case 123:
              H._Parser_pushStackFrame(parser, stack);
              break;
            case 125:
              H._Parser_handleNamedGroup(parser, stack);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = H._Parser_pop(stack);
      return H._Parser_toType(H._Parser_universe(parser), H._Parser_environment(parser), item);
    },
    _Parser_pushStackFrame: function(parser, stack) {
      H._Parser_push(stack, H._Parser_position(parser));
      H._Parser_setPosition(parser, H._Utils_arrayLength(stack));
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch, t2,
        value = H.Recipe_digitValue(digit);
      for (t1 = source.length; i < t1; ++i) {
        ch = H._Parser_charCodeAt(source, i);
        if (!H.boolConversionCheck(H.Recipe_isDigit(ch)))
          break;
        t2 = H.Recipe_digitValue(ch);
        if (typeof t2 !== "number")
          return H.iae(t2);
        value = value * 10 + t2;
      }
      H._Parser_push(stack, value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, string,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = H._Parser_charCodeAt(source, i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else if (!(H.boolConversionCheck(H.Recipe_isIdentifierStart(ch)) || H.boolConversionCheck(H.Recipe_isDigit(ch))))
          break;
      }
      string = H._Utils_substring(source, start, i);
      if (hasPeriod)
        H._Parser_push(stack, H._Universe_evalTypeVariable(H._Parser_universe(parser), H._Parser_environment(parser), string));
      else
        H._Parser_push(stack, string);
      return i;
    },
    _Parser_handleTypeArguments: function(parser, stack) {
      var base,
        universe = H._Parser_universe(parser),
        $arguments = H._Parser_collectArray(parser, stack),
        head = H._Parser_pop(stack);
      if (H.boolConversionCheck(H._Utils_isString(head)))
        H._Parser_push(stack, H._Universe__lookupInterfaceRti(universe, H._Utils_asString(head), $arguments));
      else {
        base = H._Parser_toType(universe, H._Parser_environment(parser), head);
        switch (H.Rti__getKind(base)) {
          case 11:
            H._Parser_push(stack, H._Universe__lookupGenericFunctionRti(universe, base, $arguments, H._Parser_normalize(parser)));
            break;
          default:
            H._Parser_push(stack, H._Universe__lookupBindingRti(universe, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleFunctionArguments: function(parser, stack) {
      var universe = H._Parser_universe(parser),
        parameters = H._FunctionParameters_allocate(),
        optionalPositional = H._Universe_sharedEmptyArray(universe),
        named = H._Universe_sharedEmptyArray(universe),
        head = H._Parser_pop(stack);
      if (H.boolConversionCheck(H._Utils_isNum(head)))
        switch (H._Utils_asInt(head)) {
          case -1:
            optionalPositional = H._Parser_pop(stack);
            break;
          case -2:
            named = H._Parser_pop(stack);
            break;
          default:
            H._Parser_push(stack, head);
            break;
        }
      else
        H._Parser_push(stack, head);
      H._FunctionParameters__setRequiredPositional(parameters, H._Parser_collectArray(parser, stack));
      H._FunctionParameters__setOptionalPositional(parameters, optionalPositional);
      H._FunctionParameters__setNamed(parameters, named);
      H._Parser_push(stack, H._Universe__lookupFunctionRti(universe, H._Parser_toType(universe, H._Parser_environment(parser), H._Parser_pop(stack)), parameters));
    },
    _Parser_handleOptionalGroup: function(parser, stack) {
      H._Parser_push(stack, H._Parser_collectArray(parser, stack));
      H._Parser_push(stack, -1);
    },
    _Parser_handleNamedGroup: function(parser, stack) {
      H._Parser_push(stack, H._Parser_collectNamed(parser, stack));
      H._Parser_push(stack, -2);
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = H._Parser_pop(stack);
      if (0 === $top) {
        H._Parser_push(stack, H._Universe__lookupNeverRti(H._Parser_universe(parser)));
        return;
      }
      if (1 === $top) {
        H._Parser_push(stack, H._Universe__lookupAnyRti(H._Parser_universe(parser)));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_collectArray: function(parser, stack) {
      var array = H._Utils_arraySplice(stack, H._Parser_position(parser));
      H._Parser_toTypes(H._Parser_universe(parser), H._Parser_environment(parser), array);
      H._Parser_setPosition(parser, H._Utils_asInt(H._Parser_pop(stack)));
      return array;
    },
    _Parser_collectNamed: function(parser, stack) {
      var array = H._Utils_arraySplice(stack, H._Parser_position(parser));
      H._Parser_toTypesNamed(H._Parser_universe(parser), H._Parser_environment(parser), array);
      H._Parser_setPosition(parser, H._Utils_asInt(H._Parser_pop(stack)));
      return array;
    },
    _Parser_toType: function(universe, environment, item) {
      if (H.boolConversionCheck(H._Utils_isString(item)))
        return H._Universe__lookupInterfaceRti(universe, H._Utils_asString(item), H._Universe_sharedEmptyArray(universe));
      else if (H.boolConversionCheck(H._Utils_isNum(item)))
        return H._Parser_indexToType(universe, environment, H._Utils_asInt(item));
      else
        return H._Utils_asRti(item);
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = H._Utils_arrayLength(items);
      for (i = 0; i < $length; ++i)
        H._Utils_arraySetAt(items, i, H._Parser_toType(universe, environment, H._Utils_arrayAt(items, i)));
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = H._Utils_arrayLength(items);
      for (i = 2; i < $length; i += 3)
        H._Utils_arraySetAt(items, i, H._Parser_toType(universe, environment, H._Utils_arrayAt(items, i)));
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = H.Rti__getKind(environment);
      if (kind === 10) {
        if (index === 0)
          return H.Rti__getBindingBase(environment);
        typeArguments = H.Rti__getBindingArguments(environment);
        len = H._Utils_arrayLength(typeArguments);
        if (index <= len)
          return H._Utils_asRti(H._Utils_arrayAt(typeArguments, index - 1));
        index -= len;
        environment = H.Rti__getBindingBase(environment);
        kind = H.Rti__getKind(environment);
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = H.Rti__getInterfaceTypeArguments(environment);
      if (index <= H._Utils_arrayLength(typeArguments))
        return H._Utils_asRti(H._Utils_arrayAt(typeArguments, index - 1));
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + H.S(environment)));
    },
    _Parser_toGenericFunctionParameter: function(universe, item) {
      return H._Universe__lookupGenericFunctionParameterRti(universe, H._Utils_asInt(item));
    },
    TypeRule_lookupTypeVariable: function(rule, typeVariable) {
      return rule[typeVariable];
    },
    TypeRule_lookupSupertype: function(rule, supertype) {
      return rule[supertype];
    },
    isSubtype: function(universe, s, t) {
      return H._isSubtype(universe, s, null, t, null);
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var sKind, leftTypeVariable, tKind, t1, sBounds, tBounds, sLength, i, sBound, tBound;
      if (H.boolConversionCheck(H._Utils_isIdentical(s, t)))
        return true;
      if (H.boolConversionCheck(H.isTopType(t)))
        return true;
      sKind = H.Rti__getKind(s);
      if (sKind === 4)
        return true;
      if (H.boolConversionCheck(H.isStrongTopType(s)))
        return false;
      if (H.boolConversionCheck(H.isBottomType(s)))
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(sEnv, H.Rti__getGenericFunctionParameterIndex(s))), sEnv, t, tEnv)))
          return true;
      tKind = H.Rti__getKind(t);
      t1 = H.boolConversionCheck(H.isNullType(s));
      if (t1) {
        if (tKind === 8)
          return H._isSubtype(universe, s, sEnv, H.Rti__getFutureOrArgument(t), tEnv);
        return H.boolConversionCheck(H.isNullType(t)) || tKind === 7 || tKind === 6;
      }
      t1 = H.boolConversionCheck(H.isObjectType(t));
      if (t1) {
        if (sKind === 8)
          return H._isSubtype(universe, H.Rti__getFutureOrArgument(s), sEnv, t, tEnv);
        if (sKind === 6)
          return H._isSubtype(universe, H.Rti__getStarArgument(s), sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return H._isSubtype(universe, H.Rti__getStarArgument(s), sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = H.Rti__getQuestionFromStar(universe, t);
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H.boolConversionCheck(H._isSubtype(universe, H.Rti__getFutureOrArgument(s), sEnv, t, tEnv)))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H.boolConversionCheck(H._isSubtype(universe, type$.Null, sEnv, t, tEnv));
        return t1 && H.boolConversionCheck(H._isSubtype(universe, H.Rti__getQuestionArgument(s), sEnv, t, tEnv));
      }
      if (tKind === 8) {
        if (H.boolConversionCheck(H._isSubtype(universe, s, sEnv, H.Rti__getFutureOrArgument(t), tEnv)))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H.boolConversionCheck(H._isSubtype(universe, s, sEnv, type$.Null, tEnv));
        return t1 || H.boolConversionCheck(H._isSubtype(universe, s, sEnv, H.Rti__getQuestionArgument(t), tEnv));
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && H.boolConversionCheck(H.isFunctionType(t)))
        return true;
      if (tKind === 12) {
        if (H.boolConversionCheck(H.isJsFunctionType(s)))
          return true;
        if (sKind !== 12)
          return false;
        sBounds = H.Rti__getGenericFunctionBounds(s);
        tBounds = H.Rti__getGenericFunctionBounds(t);
        sLength = H._Utils_arrayLength(sBounds);
        if (sLength !== H._Utils_arrayLength(tBounds))
          return false;
        sEnv = sEnv == null ? sBounds : H._Utils_arrayConcat(sBounds, sEnv);
        tEnv = tEnv == null ? tBounds : H._Utils_arrayConcat(tBounds, tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = H._Utils_asRti(H._Utils_arrayAt(sBounds, i));
          tBound = H._Utils_asRti(H._Utils_arrayAt(tBounds, i));
          if (!H.boolConversionCheck(H._isSubtype(universe, sBound, sEnv, tBound, tEnv)) || !H.boolConversionCheck(H._isSubtype(universe, tBound, tEnv, sBound, sEnv)))
            return false;
        }
        return H._isFunctionSubtype(universe, H.Rti__getGenericFunctionBase(s), sEnv, H.Rti__getGenericFunctionBase(t), tEnv);
      }
      if (tKind === 11) {
        if (H.boolConversionCheck(H.isJsFunctionType(s)))
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, sParameter, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired, tIsRequired, sType;
      if (!H.boolConversionCheck(H._isSubtype(universe, H.Rti__getReturnType(s), sEnv, H.Rti__getReturnType(t), tEnv)))
        return false;
      sParameters = H.Rti__getFunctionParameters(s);
      tParameters = H.Rti__getFunctionParameters(t);
      sRequiredPositional = H._FunctionParameters__getRequiredPositional(sParameters);
      tRequiredPositional = H._FunctionParameters__getRequiredPositional(tParameters);
      sRequiredPositionalLength = H._Utils_arrayLength(sRequiredPositional);
      tRequiredPositionalLength = H._Utils_arrayLength(tRequiredPositional);
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = H._FunctionParameters__getOptionalPositional(sParameters);
      tOptionalPositional = H._FunctionParameters__getOptionalPositional(tParameters);
      sOptionalPositionalLength = H._Utils_arrayLength(sOptionalPositional);
      tOptionalPositionalLength = H._Utils_arrayLength(tOptionalPositional);
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        sParameter = H._Utils_asRti(H._Utils_arrayAt(sRequiredPositional, i));
        if (!H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(tRequiredPositional, i)), tEnv, sParameter, sEnv)))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        sParameter = H._Utils_asRti(H._Utils_arrayAt(sOptionalPositional, i));
        if (!H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(tRequiredPositional, sRequiredPositionalLength + i)), tEnv, sParameter, sEnv)))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        sParameter = H._Utils_asRti(H._Utils_arrayAt(sOptionalPositional, requiredPositionalDelta + i));
        if (!H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(tOptionalPositional, i)), tEnv, sParameter, sEnv)))
          return false;
      }
      sNamed = H._FunctionParameters__getNamed(sParameters);
      tNamed = H._FunctionParameters__getNamed(tParameters);
      sNamedLength = H._Utils_arrayLength(sNamed);
      tNamedLength = H._Utils_arrayLength(tNamed);
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = H._Utils_asString(H._Utils_arrayAt(tNamed, tIndex));
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = H._Utils_asString(H._Utils_arrayAt(sNamed, sIndex));
          sIndex += 3;
          if (H.boolConversionCheck(H._Utils_stringLessThan(tName, sName)))
            return false;
          sIsRequired = H.boolConversionCheck(H._Utils_asBool(H._Utils_arrayAt(sNamed, sIndex - 2)));
          if (H.boolConversionCheck(H._Utils_stringLessThan(sName, tName))) {
            if (sIsRequired)
              return false;
            continue;
          }
          tIsRequired = H.boolConversionCheck(H._Utils_asBool(H._Utils_arrayAt(tNamed, tIndex + 1)));
          if (sIsRequired && !tIsRequired)
            return false;
          sType = H._Utils_asRti(H._Utils_arrayAt(sNamed, sIndex - 1));
          if (!H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(tNamed, tIndex + 2)), tEnv, sType, sEnv)))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (H.boolConversionCheck(H._Utils_asBool(H._Utils_arrayAt(sNamed, sIndex + 1))))
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, sArg, tArg, rule, supertypeArgs,
        sName = H.Rti__getInterfaceName(s),
        tName = H.Rti__getInterfaceName(t);
      if (sName === tName) {
        sArgs = H.Rti__getInterfaceTypeArguments(s);
        tArgs = H.Rti__getInterfaceTypeArguments(t);
        $length = H._Utils_arrayLength(sArgs);
        for (i = 0; i < $length; ++i) {
          sArg = H._Utils_asRti(H._Utils_arrayAt(sArgs, i));
          tArg = H._Utils_asRti(H._Utils_arrayAt(tArgs, i));
          if (!H.boolConversionCheck(H._isSubtype(universe, sArg, sEnv, tArg, tEnv)))
            return false;
        }
        return true;
      }
      if (H.boolConversionCheck(H.isObjectType(t)))
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = H.TypeRule_lookupSupertype(rule, tName);
      if (supertypeArgs == null)
        return false;
      $length = H._Utils_arrayLength(supertypeArgs);
      tArgs = H.Rti__getInterfaceTypeArguments(t);
      for (i = 0; i < $length; ++i)
        if (!H.boolConversionCheck(H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, H._Utils_asString(H._Utils_arrayAt(supertypeArgs, i))), sEnv, H._Utils_asRti(H._Utils_arrayAt(tArgs, i)), tEnv)))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = H.Rti__getKind(t);
      if (!H.boolConversionCheck(H.isNullType(t)))
        if (!H.boolConversionCheck(H.isStrongTopType(t)))
          if (kind !== 7)
            if (!(kind === 6 && H.boolConversionCheck(H.isNullable(H.Rti__getStarArgument(t)))))
              t1 = kind === 8 && H.boolConversionCheck(H.isNullable(H.Rti__getFutureOrArgument(t)));
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.boolConversionCheck(H.isStrongTopType(t)))
        if (!H.boolConversionCheck(H.isLegacyObjectType(t)))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var kind = H.Rti__getKind(t);
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || H.boolConversionCheck(H.isNullableObjectType(t));
    },
    isBottomType: function(t) {
      var t1;
      if (!H.boolConversionCheck(J.$eq$(H.Rti__getKind(t), 1)))
        t1 = false;
      else
        t1 = true;
      return t1;
    },
    isObjectType: function(t) {
      return H._Utils_isIdentical(t, type$.Object);
    },
    isLegacyObjectType: function(t) {
      return H._Utils_isIdentical(t, type$.legacy_Object);
    },
    isNullableObjectType: function(t) {
      return H._Utils_isIdentical(t, type$.nullable_Object);
    },
    isNullType: function(t) {
      return H.boolConversionCheck(H._Utils_isIdentical(t, type$.Null)) || H.boolConversionCheck(H._Utils_isIdentical(t, type$.JSNull));
    },
    isFunctionType: function(t) {
      return H._Utils_isIdentical(t, type$.Function);
    },
    isJsFunctionType: function(t) {
      return H._Utils_isIdentical(t, type$.JavaScriptFunction);
    },
    _Utils_asBool: function(o) {
      return o;
    },
    _Utils_asDouble: function(o) {
      return o;
    },
    _Utils_asInt: function(o) {
      return o;
    },
    _Utils_asNum: function(o) {
      return o;
    },
    _Utils_asString: function(o) {
      return o;
    },
    _Utils_asRti: function(s) {
      return s;
    },
    _Utils_asRtiOrNull: function(s) {
      return s;
    },
    _Utils_isString: function(o) {
      return typeof o == "string";
    },
    _Utils_isNum: function(o) {
      return typeof o == "number";
    },
    _Utils_instanceOf: function(o, $constructor) {
      return o instanceof $constructor;
    },
    _Utils_isIdentical: function(s, t) {
      return s === t;
    },
    _Utils_isNotIdentical: function(s, t) {
      return s !== t;
    },
    _Utils_objectKeys: function(o) {
      return Object.keys(o);
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = H._Utils_objectKeys(other),
        $length = H._Utils_arrayLength(keys);
      for (i = 0; i < $length; ++i) {
        key = H._Utils_asString(H._Utils_arrayAt(keys, i));
        o[key] = other[key];
      }
    },
    _Utils_isArray: function(o) {
      return Array.isArray(o);
    },
    _Utils_arrayLength: function(array) {
      return array.length;
    },
    _Utils_arrayAt: function(array, i) {
      return array[i];
    },
    _Utils_arraySetAt: function(array, i, value) {
      array[i] = value;
    },
    _Utils_arraySplice: function(array, position) {
      return array.splice(position);
    },
    _Utils_arrayConcat: function(a1, a2) {
      return a1.concat(a2);
    },
    _Utils_arrayPush: function(array, value) {
      array.push(value);
    },
    _Utils_substring: function(s, start, end) {
      return s.substring(start, end);
    },
    _Utils_stringLessThan: function(s1, s2) {
      return s1 < s2;
    },
    _Utils_mapGet: function(cache, key) {
      return cache.get(key);
    },
    _Utils_mapSet: function(cache, key, value) {
      cache.set(key, value);
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return H.JsCache_fetch(init.mangledGlobalNames, $name);
    },
    Recipe_isDigit: function(code) {
      return code >= 48 && code <= 57;
    },
    Recipe_digitValue: function(code) {
      return code - 48;
    },
    Recipe_isIdentifierStart: function(ch) {
      return (((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36;
    }
  },
  J = {
    JSArray_JSArray$fixed: function($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length"));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable: function($length, $E) {
      if ($length < 0)
        throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
      return J.JSArray_JSArray$markGrowable(new Array($length), $E);
    },
    JSArray_JSArray$typed: function(allocation, $E) {
      return allocation;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_JSArray$markGrowable: function(allocation, $E) {
      return H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), $E._eval$1("JSArray<0>"));
    },
    JSArray_markFixedList: function(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_isFixedLength: function(a) {
      return !!a.fixed$length;
    },
    JSArray_isUnmodifiable: function(a) {
      return !!a.immutable$list;
    },
    JSArray_isGrowable: function(a) {
      return !H.boolConversionCheck(J.JSArray_isFixedLength(a));
    },
    JSArray_isMutable: function(a) {
      return !H.boolConversionCheck(J.JSArray_isUnmodifiable(a));
    },
    ArrayIterator$: function(iterable, $E) {
      return new J.ArrayIterator(iterable, iterable.length, $E._eval$1("ArrayIterator<0>"));
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$a: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$as: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$s: function(receiver) {
      return J.getInterceptor$s(receiver).get$isEmpty(receiver);
    },
    get$iterator$a: function(receiver) {
      return J.getInterceptor$a(receiver).get$iterator(receiver);
    },
    get$length$as: function(receiver) {
      return J.getInterceptor$as(receiver).get$length(receiver);
    },
    $add$ns: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ns(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$a: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array)
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$a(receiver).$index(receiver, a0);
    },
    $indexSet$a: function(receiver, a0, a1) {
      return J.getInterceptor$a(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$a: function(receiver, a0) {
      return J.getInterceptor$a(receiver).add$1(receiver, a0);
    },
    contains$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).contains$1(receiver, a0);
    },
    lastIndexOf$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).lastIndexOf$1(receiver, a0);
    },
    remainder$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).remainder$1(receiver, a0);
    },
    removeLast$0$a: function(receiver) {
      return J.getInterceptor$a(receiver).removeLast$0(receiver);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__scheduleImmediate: function(callback) {
      $.$get$_AsyncRun__scheduleImmediateClosure().call$1(callback);
    },
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      H.requiresPreamble();
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = duration.get$inMilliseconds();
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _hasTimer: function() {
      H.requiresPreamble();
      return self.setTimeout != null;
    },
    _AsyncAwaitCompleter$: function($T) {
      return new P._AsyncAwaitCompleter(P._Future$($T), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _makeAsyncAwaitCompleter: function($T) {
      return P._AsyncAwaitCompleter$($T);
    },
    _asyncStartSync: function(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer.get$future();
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn: function(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow: function(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var t1, future,
        thenCallback = new P._awaitOnObject_closure(bodyFunction),
        errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      if (object instanceof P._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = P._Future$(t1);
          future._setValue$1(object);
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return P.Zone_current().registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _rethrow: function(error, stackTrace) {
      error = type$.Object._as(H.wrapException(error));
      error.stack = stackTrace.toString$0(0);
      throw error;
    },
    DeferredLoadException$: function(message) {
      return new P.DeferredLoadException(message);
    },
    Future_Future$sync: function(computation, $T) {
      var result, error, stackTrace, future, replacement, t1, exception, replacement0;
      try {
        result = computation.call$0();
        if ($T._eval$1("Future<0>")._is(result))
          return result;
        else {
          t1 = P._Future$value($T._as(result), $T);
          return t1;
        }
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        future = P._Future$($T);
        replacement0 = P.Zone_current().errorCallback$2(error, stackTrace);
        replacement = replacement0;
        if (replacement != null)
          future._asyncCompleteError$2(replacement.error, replacement.stackTrace);
        else
          future._asyncCompleteError$2(error, stackTrace);
        return future;
      }
    },
    Future_Future$value: function(value, $T) {
      return P._Future$immediate(value == null ? $T._as(value) : value, $T);
    },
    Future_Future$error: function(error, stackTrace, $T) {
      var replacement;
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      if (P.Zone_current() !== C.C__RootZone) {
        replacement = P.Zone_current().errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        }
      }
      return P._Future$immediateError(error, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace, $T);
    },
    Future_wait: function(futures, $T) {
      var _error_get, _error_set, _stackTrace_get, _stackTrace_set, handleError, future, pos, e, st, t2, t3, t4, exception, _box_0 = {}, cleanUp = null,
        eagerError = false,
        t1 = $T._eval$1("List<0>"),
        _future = P._Future$(t1);
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.error = null;
      _error_get = new P.Future_wait__error_get(_box_0);
      _error_set = new P.Future_wait__error_set(_box_0);
      _box_0.stackTrace = null;
      _stackTrace_get = new P.Future_wait__stackTrace_get(_box_0);
      _stackTrace_set = new P.Future_wait__stackTrace_set(_box_0);
      handleError = new P.Future_wait_handleError(_box_0, cleanUp, eagerError, _future, _error_set, _stackTrace_set, _error_get, _stackTrace_get);
      try {
        for (t2 = J.get$iterator$a(futures), t3 = type$.Null; H.boolConversionCheck(t2.moveNext$0());) {
          future = t2.get$current();
          pos = _box_0.remaining;
          future.then$1$2$onError(new P.Future_wait_closure(_box_0, pos, _future, cleanUp, eagerError, _error_get, _stackTrace_get, $T), handleError, t3);
          t4 = _box_0.remaining;
          if (typeof t4 !== "number")
            return t4.$add();
          _box_0.remaining = t4 + 1;
        }
        if (H.boolConversionCheck(J.$eq$(_box_0.remaining, 0))) {
          t2 = P.Future_Future$value(C.List_empty, t1);
          return t2;
        }
        _box_0.values = P.List_List$filled(_box_0.remaining, null, $T._eval$1("0?"));
      } catch (exception) {
        e = H.unwrapException(exception);
        st = H.getTraceFromException(exception);
        if (H.boolConversionCheck(J.$eq$(_box_0.remaining, 0)) || H.boolConversionCheck(eagerError))
          return P.Future_Future$error(e, st, t1);
        else {
          _error_set.call$1(e);
          _stackTrace_set.call$1(st);
        }
      }
      return _future;
    },
    Completer_Completer: function($T) {
      return P._AsyncCompleter$($T);
    },
    _AsyncCompleter$: function($T) {
      return new P._AsyncCompleter(P._Future$($T), $T._eval$1("_AsyncCompleter<0>"));
    },
    _FutureListener$then: function(result, onValue, errorCallback, $S, $T) {
      var t1 = errorCallback == null ? 1 : 3;
      return new P._FutureListener(result, t1, onValue, errorCallback, $S._eval$1("@<0>")._bind$1($T)._eval$1("_FutureListener<1,2>"));
    },
    _FutureListener$thenAwait: function(result, onValue, errorCallback, $S, $T) {
      return new P._FutureListener(result, 19, onValue, errorCallback, $S._eval$1("@<0>")._bind$1($T)._eval$1("_FutureListener<1,2>"));
    },
    _Future$: function($T) {
      return new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
    },
    _Future$immediate: function(result, $T) {
      var t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._Future$immediate$1(result, $T);
      return t1;
    },
    _Future$immediateError: function(error, stackTrace, $T) {
      var t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._Future$immediateError$2(error, stackTrace, $T);
      return t1;
    },
    _Future$value: function(value, $T) {
      var t1 = $.Zone__current,
        t2 = new P._Future(t1, $T._eval$1("_Future<0>"));
      t2._Future$zoneValue$2(value, t1, $T);
      return t2;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._setPendingComplete$0();
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var listeners;
      for (; H.boolConversionCheck(source.get$_isChained());)
        source = source.get$_chainSource();
      if (H.boolConversionCheck(source.get$_isComplete())) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t2, t3, _box_0, hasError, asyncError, nextListener, nextListener0, sourceResult, t4, zone, oldZone, result, _box_1 = {},
        t1 = _box_1.source = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1.get$_hasError();
        if (listeners == null) {
          if (hasError) {
            asyncError = _box_1.source.get$_error();
            _box_1.source._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        sourceResult = _box_1.source._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t4 = !hasError;
        if (!t4 || H.boolConversionCheck(t1.get$handlesValue()) || H.boolConversionCheck(_box_0.listener.get$handlesComplete())) {
          zone = _box_0.listener.get$_zone();
          if (hasError && !H.boolConversionCheck(_box_1.source._zone.inSameErrorZone$1(zone))) {
            asyncError = _box_1.source.get$_error();
            _box_1.source._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current !== zone ? P.Zone__enter(zone) : null;
          if (H.boolConversionCheck(_box_0.listener.get$handlesComplete()))
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t4) {
            if (H.boolConversionCheck(_box_0.listener.get$handlesValue()))
              new P._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if (H.boolConversionCheck(_box_0.listener.get$handlesError()))
            new P._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            P.Zone__leave(oldZone);
          t1 = _box_0.listenerValueOrError;
          if (t3._is(t1)) {
            result = _box_0.listener.result;
            if (H.boolConversionCheck(t1.get$_isComplete())) {
              listeners = result._removeListeners$0();
              result._cloneResult$1(t1);
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        listeners = result._removeListeners$0();
        t1 = H.boolConversionCheck(_box_0.listenerHasError);
        t4 = _box_0.listenerValueOrError;
        if (!t1)
          result._setValue$1(t4);
        else
          result._setErrorObject$1(t2._as(t4));
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _AsyncCallbackEntry$: function(callback) {
      return new P._AsyncCallbackEntry(callback);
    },
    _microtaskLoop: function() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = P._AsyncCallbackEntry$(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!H.boolConversionCheck($._isInCallbackLoop))
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, lastPriorityCallback, next;
      if ($._nextCallback == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = P._AsyncCallbackEntry$(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.set$next($._nextCallback);
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      currentZone.get$_scheduleMicrotask();
      t1 = H.boolConversionCheck(C.C__RootZone.inSameErrorZone$1(currentZone));
      if (t1) {
        P._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      P.Zone_current().scheduleMicrotask$1(P.Zone_current().bindCallbackGuarded$1(callback));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      return P._StreamIterator$(stream, $T);
    },
    _StreamIterator$: function(stream, $T) {
      var t1 = new P._StreamIterator($T._eval$1("_StreamIterator<0>"));
      t1._StreamIterator$1(stream, $T);
      return t1;
    },
    AsyncError$: function(error, stackTrace) {
      var t1 = new P.AsyncError(error, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
      t1.AsyncError$2(error, stackTrace);
      return t1;
    },
    AsyncError_defaultStackTrace: function(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    Zone_current: function() {
      return $.Zone__current;
    },
    Zone__enter: function(zone) {
      var previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    Zone__leave: function(previous) {
      $.Zone__current = previous;
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(error, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      type$.void_Function._as(f);
      if (C.C__RootZone !== zone)
        f = !H.boolConversionCheck(C.C__RootZone.inSameErrorZone$1(zone)) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    DeferredLoadException: function DeferredLoadException(t0) {
      this._s = t0;
    },
    Future: function Future() {
    },
    Future_wait__error_set: function Future_wait__error_set(t0) {
      this._box_0 = t0;
    },
    Future_wait__stackTrace_set: function Future_wait__stackTrace_set(t0) {
      this._box_0 = t0;
    },
    Future_wait__error_get: function Future_wait__error_get(t0) {
      this._box_0 = t0;
    },
    Future_wait__stackTrace_get: function Future_wait__stackTrace_get(t0) {
      this._box_0 = t0;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
      _._error_set = t4;
      _._stackTrace_set = t5;
      _._error_get = t6;
      _._stackTrace_get = t7;
    },
    Future_wait_handleError_closure: function Future_wait_handleError_closure(t0, t1) {
      this.cleanUp = t0;
      this.cleanUpValue = t1;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.cleanUp = t3;
      _.eagerError = t4;
      _._error_get = t5;
      _._stackTrace_get = t6;
      _.T = t7;
    },
    Future_wait__closure: function Future_wait__closure(t0, t1) {
      this.cleanUp = t0;
      this.value = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _ZoneFunction: function _ZoneFunction(t0) {
      this.$ti = t0;
    },
    ZoneDelegate: function ZoneDelegate() {
    },
    Zone: function Zone() {
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V);
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      var t1 = P._LinkedHashSet$($E);
      return t1;
    },
    _LinkedHashSet$: function($E) {
      return new P._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__isStringElement: function(element) {
      return typeof element == "string" && element !== "__proto__";
    },
    _LinkedHashSet__isNumericElement: function(element) {
      return typeof element == "number" && (element & 1073741823) === element;
    },
    _LinkedHashSet__getTableEntry: function(table, key) {
      return table[key];
    },
    _LinkedHashSet__setTableEntry: function(table, key, value) {
      table[key] = value;
    },
    _LinkedHashSet__deleteTableEntry: function(table, key) {
      delete table[key];
    },
    _LinkedHashSet__newHashTable: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      P._LinkedHashSet__setTableEntry(table, _s20_, table);
      P._LinkedHashSet__deleteTableEntry(table, _s20_);
      return table;
    },
    _LinkedHashSetCell$: function(_element) {
      return new P._LinkedHashSetCell(_element);
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._LinkedHashSetIterator$2(_set, _modifications, $E);
      return t1;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (H.boolConversionCheck(P._isToStringVisiting(iterable))) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      t1 = J.getInterceptor$a($._toStringVisiting);
      t1.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        t1.removeLast$0($._toStringVisiting);
      }
      t1 = P.StringBuffer$(leftDelimiter);
      t1.writeAll$2(parts, ", ");
      t1.write$1(rightDelimiter);
      return t1.toString$0(0);
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (H.boolConversionCheck(P._isToStringVisiting(iterable)))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = P.StringBuffer$(leftDelimiter);
      t1 = J.getInterceptor$a($._toStringVisiting);
      t1.add$1($._toStringVisiting, iterable);
      try {
        buffer.writeAll$2(iterable, ", ");
      } finally {
        t1.removeLast$0($._toStringVisiting);
      }
      buffer.write$1(rightDelimiter);
      return J.toString$0$(buffer);
    },
    _isToStringVisiting: function(o) {
      var t2,
        t1 = J.getInterceptor$as($._toStringVisiting),
        i = 0;
      while (true) {
        t2 = t1.get$length($._toStringVisiting);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (o === t1.$index($._toStringVisiting, i))
          return true;
        ++i;
      }
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t1, elision,
        it = J.get$iterator$a(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!H.boolConversionCheck(it.moveNext$0()))
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!H.boolConversionCheck(it.moveNext$0())) {
        if (count <= 5)
          return;
        ultimateString = C.JSArray_methods.removeLast$0(parts);
        penultimateString = C.JSArray_methods.removeLast$0(parts);
      } else {
        penultimate = it.get$current();
        ++count;
        if (!H.boolConversionCheck(it.moveNext$0())) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          penultimateString = C.JSArray_methods.removeLast$0(parts);
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; H.boolConversionCheck(it.moveNext$0()); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                t1 = J.get$length$as(C.JSArray_methods.removeLast$0(parts));
                if (typeof t1 !== "number")
                  return t1.$add();
                $length -= t1 + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        t1 = J.get$length$as(C.JSArray_methods.removeLast$0(parts));
        if (typeof t1 !== "number")
          return t1.$add();
        $length -= t1 + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    ListBase_listToString: function(list) {
      return P.IterableBase_iterableToFullString(list, "[", "]");
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (H.boolConversionCheck(P._isToStringVisiting(m)))
        return "{...}";
      result = P.StringBuffer$("");
      try {
        J.add$1$a($._toStringVisiting, m);
        result.write$1("{");
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result.write$1("}");
      } finally {
        J.removeLast$0$a($._toStringVisiting);
      }
      return J.toString$0$(result);
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._first = _._collection$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._modifications = t1;
      _._collection$_current = _._cell = null;
      _.$ti = t2;
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _SetBase: function _SetBase() {
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Error__stringToSafeString: function(string) {
      return H.jsonEncodeNative(string);
    },
    List_List$filled: function($length, fill, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from: function(elements, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$a(elements); H.boolConversionCheck(t1.moveNext$0());)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      return list;
    },
    List_List$generate: function($length, generator, $E) {
      var i,
        result = J.JSArray_JSArray$growable($length, $E);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    StringBuffer$: function($content) {
      return new P.StringBuffer(H.S($content));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$a(objects);
      if (!H.boolConversionCheck(iterator.moveNext$0()))
        return string;
      if (H.boolConversionCheck(C.JSString_methods.get$isEmpty(separator))) {
        do
          string = P.StringBuffer__writeOne(string, iterator.get$current());
        while (H.boolConversionCheck(iterator.moveNext$0()));
      } else {
        string = P.StringBuffer__writeOne(string, iterator.get$current());
        for (; H.boolConversionCheck(iterator.moveNext$0());)
          string = P.StringBuffer__writeOne(P.StringBuffer__writeOne(string, separator), iterator.get$current());
      }
      return string;
    },
    StringBuffer__writeOne: function(string, obj) {
      return H.Primitives_stringConcatUnchecked(string, H.S(obj));
    },
    StackTrace_current: function() {
      var stackTrace, exception;
      if (H.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return H.getTraceFromException(new Error());
      try {
        throw H.wrapException("");
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        return stackTrace;
      }
    },
    Duration$_microseconds: function(_duration) {
      return new P.Duration(_duration);
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return P.Error__stringToSafeString(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    NullThrownError$: function() {
      return new P.NullThrownError();
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    ArgumentError_checkNotNull: function(argument, $name, $T) {
      if (argument == null)
        throw H.wrapException(P.ArgumentError$notNull($name));
      return argument;
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asInt($length == null ? J.get$length$as(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, message == null ? "Index out of range" : message);
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    StackOverflowError$: function() {
      return new P.StackOverflowError();
    },
    CyclicInitializationError$: function(variableName) {
      return new P.CyclicInitializationError(variableName);
    },
    Exception_Exception: function(message) {
      return P._Exception$(message);
    },
    _Exception$: function(message) {
      return new P._Exception(message);
    },
    bool: function bool() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    List: function List() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    StackTrace: function StackTrace() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    }
  },
  K = {
    main0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic);
      var $async$main0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(H.loadDeferredLibrary("foo"), $async$main0);
            case 2:
              // returning from await.
              H.checkDeferredIsLoaded("foo");
              E.main();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$main0, $async$completer);
    }
  },
  E = {};
  var holders = [C, H, J, P, K, E];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToHumanReadableString(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JSArray.prototype = {
    checkMutable$1: function(receiver, reason) {
      H._asString(reason);
      if (!H.boolConversionCheck(J.JSArray_isMutable(receiver)))
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      H._asString(reason);
      if (!H.boolConversionCheck(J.JSArray_isGrowable(receiver)))
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      this.checkGrowable$1(receiver, "add");
      receiver.push(value);
    },
    removeLast$0: function(receiver) {
      this.checkGrowable$1(receiver, "removeLast");
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    join$1: function(receiver, separator) {
      var list, i;
      H._asString(separator);
      list = P.List_List$filled(receiver.length, "", type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    toString$0: function(receiver) {
      return P.ListBase_listToString(receiver);
    },
    get$iterator: function(receiver) {
      return J.ArrayIterator$(receiver, H._arrayInstanceType(receiver)._precomputed1);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      this.checkMutable$1(receiver, "indexed set");
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this._current);
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this._iterable,
        t2 = J.getInterceptor$as(t1),
        $length = t2.get$length(t1);
      if (!H.boolConversionCheck(J.$eq$(_this._length, $length)))
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t3 = _this._index;
      if (typeof t3 !== "number")
        return t3.$ge();
      if (t3 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t2.$index(t1, t3));
      t1 = _this._index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_index(t1 + 1);
      return true;
    },
    set$_index: function(_index) {
      this._index = H._asInt(_index);
    },
    set$_current: function(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  J.JSNumber.prototype = {
    remainder$1: function(receiver, b) {
      H._asNum(b);
      return receiver % b;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    _isInt32$1: function(receiver, value) {
      return (value | 0) === value;
    },
    _tdivFast$1: function(receiver, other) {
      H._asNum(other);
      return H.boolConversionCheck(this._isInt32$1(receiver, receiver)) ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient;
      H._asNum(other);
      quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + H.S(other)));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      H._asNum(other);
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      H._asNum(other);
      return other > 31 ? 0 : receiver >>> other;
    },
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    $add: function(receiver, other) {
      H._asString(other);
      return receiver + other;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      H._asInt(startIndex);
      H._asIntQ(endIndex);
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    lastIndexOf$1: function(receiver, pattern) {
      var start, t1;
      type$.Pattern._as(pattern);
      H.checkNull(pattern);
      start = receiver.length;
      t1 = pattern.length;
      return H._asInt(H.stringLastIndexOfUnchecked(receiver, pattern, start + t1 > start ? start - t1 : start));
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isPattern: 1,
    $isString: 1
  };
  H.LateInitializationErrorImpl.prototype = {
    toString$0: function(_) {
      var message = this.__internal$_message;
      return message != null ? "LateInitializationError: " + message : "LateInitializationError";
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this.__js_helper$_message);
      return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this.__js_helper$_message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + H.S(t1) + "' (" + H.S(_this.__js_helper$_message) + ")";
      return _s38_ + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(_this.__js_helper$_message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this.__js_helper$_message;
      return H.boolConversionCheck(J.get$isEmpty$s(t1)) ? "Error" : "Error: " + H.S(t1);
    }
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0: function(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.S(H.unminifyOrTag($name == null ? "unknown" : $name)) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.S(H.unminifyOrTag($name)) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this._target);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (receiverHashCode ^ t1) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + H.S(H.Primitives_objectToHumanReadableString(type$.Object._as(receiver)));
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H.DeferredNotLoadedError.prototype = {
    toString$0: function(_) {
      return "Deferred library " + H.S(this.libraryName) + " was not loaded.";
    }
  };
  H.loadDeferredLibrary_initializeSomeLoadedHunks.prototype = {
    call$0: function() {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, uri, hash, _this = this,
        t1 = _this._box_0,
        i = t1.nextHunkToInitialize,
        t2 = _this.total;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.getInterceptor$a($._eventLog);
      t4 = _this.initializer;
      t5 = _this.isHunkLoaded;
      t6 = _this.isHunkInitialized;
      t7 = _this.uris;
      t8 = J.getInterceptor$a(t7);
      t9 = _this.hashes;
      t10 = J.getInterceptor$a(t9);
      t11 = _this.waitingForLoad;
      t12 = J.getInterceptor$a(t11);
      for (; i < t2; ++i) {
        if (H.boolConversionCheck(t12.$index(t11, i)))
          return;
        t13 = t1.nextHunkToInitialize;
        if (typeof t13 !== "number")
          return t13.$add();
        t1.nextHunkToInitialize = t13 + 1;
        uri = t8.$index(t7, i);
        hash = t10.$index(t9, i);
        if (t6(hash)) {
          t3.add$1($._eventLog, " - already initialized: " + uri + " (" + hash + ")");
          continue;
        }
        if (t5(hash)) {
          t3.add$1($._eventLog, " - initialize: " + uri + " (" + hash + ")");
          t4(hash);
        } else {
          t3.add$1($._eventLog, " - missing hunk: " + uri + " (" + hash + ")");
          throw H.wrapException(P.DeferredLoadException$("Loading " + H.S(t8.$index(t7, i)) + " failed: the code with hash '" + hash + "' was not loaded.\nevent log:\n" + H.S(t3.join$1($._eventLog, "\n")) + "\n"));
        }
      }
    },
    $signature: 1
  };
  H.loadDeferredLibrary_loadAndInitialize.prototype = {
    call$1: function(i) {
      var _this = this;
      H._asInt(i);
      if (_this.isHunkLoaded(J.$index$a(_this.hashes, i))) {
        J.$indexSet$a(_this.waitingForLoad, i, false);
        return P.Future_Future$value(null, type$.dynamic);
      }
      return H._loadHunk(J.$index$a(_this.uris, i)).then$1$1(new H.loadDeferredLibrary_loadAndInitialize_closure(_this.waitingForLoad, i, _this.initializeSomeLoadedHunks), type$.dynamic);
    },
    $signature: 6
  };
  H.loadDeferredLibrary_loadAndInitialize_closure.prototype = {
    call$1: function(_) {
      type$.Null._as(_);
      J.$indexSet$a(this.waitingForLoad, this.i, false);
      this.initializeSomeLoadedHunks.call$0();
    },
    $signature: 4
  };
  H.loadDeferredLibrary_closure.prototype = {
    call$1: function(_) {
      type$.List_dynamic._as(_);
      this.initializeSomeLoadedHunks.call$0();
      J.add$1$a($.$get$_loadedLibraries(), this.loadId);
    },
    $signature: 7
  };
  H._loadHunk_closure.prototype = {
    call$1: function(_) {
      type$.Null._as(_);
      return null;
    },
    $signature: 4
  };
  H._loadHunk_success.prototype = {
    call$0: function() {
      J.add$1$a($._eventLog, " - download success: " + H.S(this.hunkName));
      this.completer.complete$1(null);
    },
    $signature: 1
  };
  H._loadHunk_failure.prototype = {
    call$3: function(error, context, stackTrace) {
      var t1, t2;
      H._asString(context);
      type$.nullable_StackTrace._as(stackTrace);
      t1 = this.hunkName;
      t2 = J.getInterceptor$a($._eventLog);
      t2.add$1($._eventLog, " - download failed: " + H.S(t1) + " (context: " + context + ")");
      J.$indexSet$a($._loadingLibraries, t1, null);
      if (stackTrace == null)
        stackTrace = P.StackTrace_current();
      this.completer.completeError$2(P.DeferredLoadException$("Loading " + H.S(this._box_0.uri) + " failed: " + H.S(error) + "\nevent log:\n" + H.S(t2.join$1($._eventLog, "\n")) + "\n"), stackTrace);
    },
    $signature: 8
  };
  H._loadHunk_closure0.prototype = {
    call$1: function(error) {
      this.failure.call$3(H.unwrapException(error), "js-failure-wrapper", H.getTraceFromException(error));
    },
    $signature: 2
  };
  H._loadHunk_closure1.prototype = {
    call$1: function($event) {
      var code, error, stackTrace, exception, _this = this,
        t1 = _this.xhr,
        $status = t1.status;
      if ($status !== 200)
        _this.failure.call$3("Request status: " + $status, "worker xhr", null);
      code = t1.responseText;
      try {
        new Function(code)();
        _this.success.call$0();
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        _this.failure.call$3(error, "evaluating the code in worker xhr", stackTrace);
      }
    },
    $signature: 2
  };
  H._loadHunk_closure2.prototype = {
    call$1: function(e) {
      this.failure.call$3(e, "xhr error handler", null);
    },
    $signature: 2
  };
  H._loadHunk_closure3.prototype = {
    call$1: function(e) {
      this.failure.call$3(e, "xhr abort handler", null);
    },
    $signature: 2
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return C.JSString_methods.$add("Assertion failed: ", P.Error_safeToString(this.message));
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$keys: function() {
      return H.LinkedHashMapKeyIterable$(this, H._instanceType(this)._precomputed1);
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (H.boolConversionCheck(H.JsLinkedHashMap__isStringKey(key))) {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (H.boolConversionCheck(H.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = this.__js_helper$_getBucket$2(rest, key);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (H.boolConversionCheck(H.JsLinkedHashMap__isStringKey(key))) {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (H.boolConversionCheck(H.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this.__js_helper$_newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this.__js_helper$_first;
      modifications = _this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this.__js_helper$_newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_modified$0: function() {
      var t1 = this.__js_helper$_modifications;
      if (typeof t1 !== "number")
        return t1.$add();
      this.__js_helper$_modifications = t1 + 1 & 67108863;
    },
    __js_helper$_newLinkedCell$2: function(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = H.LinkedHashMapCell$(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this.__js_helper$_first == null)
        _this.__js_helper$_first = _this.__js_helper$_last = cell;
      else {
        t1 = _this.__js_helper$_last;
        t1.toString;
        _this.__js_helper$_last = t1.__js_helper$_next = cell;
      }
      t1 = _this.__js_helper$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__js_helper$_length(t1 + 1);
      _this.__js_helper$_modified$0();
      return cell;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    __js_helper$_getBucket$2: function(table, key) {
      return this._getTableBucket$2(table, this.internalComputeHashCode$1(key));
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (H.boolConversionCheck(J.$eq$(bucket[i].hashMapCellKey, key)))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    set$__js_helper$_length: function(_length) {
      this.__js_helper$_length = H._asInt(_length);
    },
    get$__js_helper$_length: function() {
      return this.__js_helper$_length;
    },
    get$__js_helper$_first: function() {
      return this.__js_helper$_first;
    },
    get$__js_helper$_modifications: function() {
      return this.__js_helper$_modifications;
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return H._asInt(this._map.get$__js_helper$_length());
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return H.LinkedHashMapKeyIterator$(t1, H._asInt(t1.get$__js_helper$_modifications()), this.$ti._precomputed1);
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    LinkedHashMapKeyIterator$2: function(_map, _modifications, $E) {
      this.__js_helper$_cell = type$.nullable_LinkedHashMapCell._as(this._map.get$__js_helper$_first());
    },
    get$current: function() {
      return this.$ti._precomputed1._as(this.__js_helper$_current);
    },
    moveNext$0: function() {
      var cell, _this = this,
        t1 = _this._map;
      if (!H.boolConversionCheck(J.$eq$(_this.__js_helper$_modifications, t1.get$__js_helper$_modifications())))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this.__js_helper$_cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this.set$__js_helper$_cell(cell.__js_helper$_next);
        return true;
      }
    },
    set$__js_helper$_cell: function(_cell) {
      this.__js_helper$_cell = type$.nullable_LinkedHashMapCell._as(_cell);
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    get$__js_helper$_modifications: function() {
      return this.__js_helper$_modifications;
    }
  };
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._rtiEval(this, H._Utils_asString(recipe));
    },
    _bind$1: function(typeOrTuple) {
      return H._rtiBind(this, H._Utils_asRti(typeOrTuple));
    }
  };
  H._FunctionParameters.prototype = {};
  H._Error.prototype = {
    toString$0: function(_) {
      return this._message;
    }
  };
  H._TypeError.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 2
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 9
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (H.boolConversionCheck(P._hasTimer()))
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 1
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!H.boolConversionCheck(_this.isSync))
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(t1._precomputed1._as(value));
      }
    },
    completeError$2: function(e, st) {
      var t1;
      type$.Object._as(e);
      type$.nullable_StackTrace._as(st);
      if (st == null)
        st = P.AsyncError_defaultStackTrace(e);
      t1 = this._future;
      if (H.boolConversionCheck(this.isSync))
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    get$future: function() {
      return this._future;
    }
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 10
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, H.ExceptionAndStackTrace$(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 11
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H._asInt(errorCode), result);
    },
    $signature: 12
  };
  P.DeferredLoadException.prototype = {
    toString$0: function(_) {
      return "DeferredLoadException: '" + H.S(this._s) + "'";
    }
  };
  P.Future.prototype = {};
  P.Future_wait__error_set.prototype = {
    call$1: function(t1) {
      return this._box_0.error = type$.Object._as(t1);
    },
    $signature: 13
  };
  P.Future_wait__stackTrace_set.prototype = {
    call$1: function(t1) {
      return this._box_0.stackTrace = type$.StackTrace._as(t1);
    },
    $signature: 14
  };
  P.Future_wait__error_get.prototype = {
    call$0: function() {
      var t1 = this._box_0.error;
      return t1 == null ? H.throwExpression(H.LateInitializationErrorImpl$("Local 'error' has not been initialized.")) : t1;
    },
    $signature: 15
  };
  P.Future_wait__stackTrace_get.prototype = {
    call$0: function() {
      var t1 = this._box_0.stackTrace;
      return t1 == null ? H.throwExpression(H.LateInitializationErrorImpl$("Local 'stackTrace' has not been initialized.")) : t1;
    },
    $signature: 16
  };
  P.Future_wait_handleError.prototype = {
    call$2: function(theError, theStackTrace) {
      var t1, t2, remaining, valueList, t3, t4, value, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = t1.remaining;
      if (typeof t2 !== "number")
        return t2.$sub();
      remaining = t2 - 1;
      t1.remaining = remaining;
      valueList = t1.values;
      if (valueList != null) {
        t2 = _this.cleanUp;
        if (t2 != null)
          for (t3 = C.JSArray_methods.get$iterator(valueList), t4 = type$.Null; H.boolConversionCheck(t3.moveNext$0());) {
            value = t3.get$current();
            if (value != null)
              P.Future_Future$sync(new P.Future_wait_handleError_closure(t2, value), t4);
          }
        t1.values = null;
        if (H.boolConversionCheck(J.$eq$(t1.remaining, 0)) || H.boolConversionCheck(_this.eagerError))
          _this._future._completeError$2(theError, theStackTrace);
        else {
          _this._error_set.call$1(theError);
          _this._stackTrace_set.call$1(theStackTrace);
        }
      } else if (remaining === 0 && !H.boolConversionCheck(_this.eagerError))
        _this._future._completeError$2(_this._error_get.call$0(), _this._stackTrace_get.call$0());
    },
    $signature: 17
  };
  P.Future_wait_handleError_closure.prototype = {
    call$0: function() {
      this.cleanUp.call$1(this.cleanUpValue);
    },
    $signature: 0
  };
  P.Future_wait_closure.prototype = {
    call$1: function(value) {
      var valueList, t2, t3, _this = this,
        t1 = _this.T;
      t1._as(value);
      t2 = _this._box_0;
      t3 = t2.remaining;
      if (typeof t3 !== "number")
        return t3.$sub();
      t2.remaining = t3 - 1;
      valueList = t2.values;
      if (valueList != null) {
        J.$indexSet$a(valueList, _this.pos, value);
        if (H.boolConversionCheck(J.$eq$(t2.remaining, 0)))
          _this._future._completeWithValue$1(P.List_List$from(valueList, t1));
      } else {
        t1 = _this.cleanUp;
        if (t1 != null && value != null)
          P.Future_Future$sync(new P.Future_wait__closure(t1, value), type$.Null);
        if (H.boolConversionCheck(J.$eq$(t2.remaining, 0)) && !H.boolConversionCheck(_this.eagerError))
          _this._future._completeError$2(_this._error_get.call$0(), _this._stackTrace_get.call$0());
      }
    },
    $signature: function() {
      return this.T._eval$1("Null(0)");
    }
  };
  P.Future_wait__closure.prototype = {
    call$0: function() {
      this.cleanUp.call$1(this.value);
    },
    $signature: 0
  };
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      var replacement,
        t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      P.ArgumentError_checkNotNull(error, "error", t1);
      if (!H.boolConversionCheck(this.future.get$_mayComplete()))
        throw H.wrapException(P.StateError$("Future already completed"));
      replacement = P.Zone_current().errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      if (stackTrace == null)
        throw H.wrapException("unreachable");
      this._completeError$2(error, stackTrace);
    },
    get$future: function() {
      return this.future;
    }
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (!H.boolConversionCheck(t2.get$_mayComplete()))
        throw H.wrapException(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    }
  };
  P._FutureListener.prototype = {
    get$_zone: function() {
      return this.result._zone;
    },
    get$handlesValue: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) !== 0;
    },
    get$handlesError: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$hasErrorTest: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 15) === 6;
    },
    get$handlesComplete: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 15) === 8;
    },
    get$_onValue: function() {
      return this.$ti._eval$1("2/(1)")._as(this.callback);
    },
    get$_onError: function() {
      return this.errorCallback;
    },
    get$_errorTest: function() {
      return type$.bool_Function_Object._as(this.callback);
    },
    get$_whenCompleteAction: function() {
      return type$.dynamic_Function._as(this.callback);
    },
    get$hasErrorCallback: function() {
      return this.get$_onError() != null;
    },
    handleValue$1: function(sourceResult) {
      var t1 = this.$ti,
        t2 = t1._precomputed1;
      t2._as(sourceResult);
      return this.get$_zone().runUnary$2$2(this.get$_onValue(), sourceResult, t1._eval$1("2/"), t2);
    },
    matchesErrorTest$1: function(asyncError) {
      type$.AsyncError._as(asyncError);
      if (!H.boolConversionCheck(this.get$hasErrorTest()))
        return true;
      return this.get$_zone().runUnary$2$2(this.get$_errorTest(), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback, t1, t2, t3, t4, _this = this;
      type$.AsyncError._as(asyncError);
      errorCallback = _this.errorCallback;
      t1 = type$.dynamic;
      t2 = type$.Object;
      t3 = asyncError.error;
      t4 = _this.$ti._eval$1("2/");
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        return t4._as(_this.get$_zone().runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace));
      else
        return t4._as(_this.get$_zone().runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2));
    },
    handleWhenComplete$0: function() {
      return this.get$_zone().run$1$1(this.get$_whenCompleteAction(), type$.dynamic);
    }
  };
  P._Future.prototype = {
    _Future$immediate$1: function(result, $T) {
      this._asyncComplete$1(result);
    },
    _Future$zoneValue$2: function(value, _zone, $T) {
      this._setValue$1(value);
    },
    _Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(type$.Object._as(error), stackTrace);
    },
    get$_mayComplete: function() {
      return J.$eq$(this._state, 0);
    },
    get$_mayAddListener: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$le();
      return t1 <= 1;
    },
    get$_isChained: function() {
      return J.$eq$(this._state, 2);
    },
    get$_isComplete: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 4;
    },
    get$_hasError: function() {
      return J.$eq$(this._state, 8);
    },
    _setChained$1: function(source) {
      type$._Future_dynamic._as(source);
      this._state = 2;
      this._resultOrListeners = source;
    },
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      type$.nullable_Function._as(onError);
      currentZone = P.Zone_current();
      if (currentZone !== C.C__RootZone) {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = P._Future$($R);
      this._addListener$1(P._FutureListener$then(result, f, onError, t1._precomputed1, $R));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2: function(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      type$.Function._as(onError);
      result = P._Future$($E);
      this._addListener$1(P._FutureListener$thenAwait(result, f, onError, t1._precomputed1, $E));
      return result;
    },
    _setPendingComplete$0: function() {
      this._state = 1;
    },
    _clearPendingComplete$0: function() {
      this._state = 0;
    },
    get$_error: function() {
      return type$.AsyncError._as(this._resultOrListeners);
    },
    get$_chainSource: function() {
      return type$._Future_dynamic._as(this._resultOrListeners);
    },
    _setValue$1: function(value) {
      this.$ti._precomputed1._as(value);
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setErrorObject$1: function(error) {
      type$.AsyncError._as(error);
      this._state = 8;
      this._resultOrListeners = error;
    },
    _setError$2: function(error, stackTrace) {
      this._setErrorObject$1(P.AsyncError$(type$.Object._as(error), type$.StackTrace._as(stackTrace)));
    },
    _cloneResult$1: function(source) {
      type$._Future_dynamic._as(source);
      this.set$_state(source._state);
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1: function(listener) {
      var source, _this = this;
      type$._FutureListener_dynamic_dynamic._as(listener);
      if (H.boolConversionCheck(_this.get$_mayAddListener())) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (H.boolConversionCheck(_this.get$_isChained())) {
          source = _this.get$_chainSource();
          if (!H.boolConversionCheck(source.get$_isComplete())) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      t1 = type$.nullable__FutureListener_dynamic_dynamic;
      t1._as(listeners);
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      if (H.boolConversionCheck(_this.get$_mayAddListener())) {
        existingListeners = t1._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (H.boolConversionCheck(_this.get$_isChained())) {
          source = _this.get$_chainSource();
          if (!H.boolConversionCheck(source.get$_isComplete())) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new P._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0: function() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      type$.nullable__FutureListener_dynamic_dynamic._as(listeners);
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        _this._setValue$1(t1._precomputed1._as(value));
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._setValue$1(value);
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1: function(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1: function(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._setPendingComplete$0();
      _this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if (H.boolConversionCheck(value.get$_hasError())) {
          _this._setPendingComplete$0();
          _this._zone.scheduleMicrotask$1(new P._Future__chainFuture_closure(_this, value));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this._setPendingComplete$0();
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    set$_state: function(_state) {
      this._state = H._asInt(_state);
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._clearPendingComplete$0();
      t1._complete$1(value);
    },
    $signature: 2
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.target._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 18
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0: function() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, exception, t1, t2, originalSource, _this = this, completeResult = null;
      try {
        completeResult = _this._box_0.listener.handleWhenComplete$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (H.boolConversionCheck(_this.hasError)) {
          t1 = _this._box_1.source.get$_error().error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = _this._box_1.source.get$_error();
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof P._Future && H.boolConversionCheck(completeResult.get$_isComplete())) {
        if (H.boolConversionCheck(completeResult.get$_hasError())) {
          t1 = _this._box_0;
          t1.listenerValueOrError = completeResult.get$_error();
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 19
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = this._box_0;
        t1.listenerValueOrError = t1.listener.handleValue$1(this.sourceResult);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, exception, t2, t3, t4, _this = this;
      try {
        asyncError = _this._box_1.source.get$_error();
        t1 = _this._box_0;
        if (H.boolConversionCheck(t1.listener.matchesErrorTest$1(asyncError)) && H.boolConversionCheck(t1.listener.get$hasErrorCallback())) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_1;
        t2 = t1.source.get$_error().error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1.source.get$_error();
        else
          t4.listenerValueOrError = P.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._AsyncCallbackEntry.prototype = {
    set$next: function(next) {
      this.next = type$.nullable__AsyncCallbackEntry._as(next);
    }
  };
  P.Stream.prototype = {};
  P._StreamIterator.prototype = {
    _StreamIterator$1: function(stream, $T) {
      P.ArgumentError_checkNotNull(stream, "stream", $T._eval$1("Stream<0>"));
    }
  };
  P.AsyncError.prototype = {
    AsyncError$2: function(error, stackTrace) {
      P.ArgumentError_checkNotNull(this.error, "error", type$.Object);
    },
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._ZoneFunction.prototype = {};
  P.ZoneDelegate.prototype = {};
  P.Zone.prototype = {};
  P._Zone.prototype = {
    inSameErrorZone$1: function(otherZone) {
      var t1, t2;
      type$.Zone._as(otherZone);
      if (this !== otherZone) {
        t1 = this.get$errorZone();
        t2 = otherZone.get$errorZone();
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    $isZone: 1
  };
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      P._rethrow(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    get$_scheduleMicrotask: function() {
      return C.C__ZoneFunction;
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    handleUncaughtError$2: function(error, stackTrace) {
      P._rootHandleUncaughtError(null, null, this, type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    run$1$1: function(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1: function(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1: function(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2: function(error, stackTrace) {
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return this.R._eval$1("0()");
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      return P._LinkedHashSetIterator$(this, this._modifications, H._instanceType(this)._precomputed1);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (H.boolConversionCheck(P._LinkedHashSet__isStringElement(object))) {
        strings = this._strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(P._LinkedHashSet__getTableEntry(strings, object)) != null;
      } else if (H.boolConversionCheck(P._LinkedHashSet__isNumericElement(object))) {
        nums = this._nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(P._LinkedHashSet__getTableEntry(nums, object)) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var t1,
        rest = this._collection$_rest;
      if (rest == null)
        return false;
      t1 = this._findBucketIndex$2(this._getBucket$2(rest, object), object);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      if (H.boolConversionCheck(P._LinkedHashSet__isStringElement(element))) {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (H.boolConversionCheck(P._LinkedHashSet__isNumericElement(element))) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        P._LinkedHashSet__setTableEntry(rest, hash, [_this._newLinkedCell$1(element)]);
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    _addHashTableEntry$2: function(table, element) {
      H._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(P._LinkedHashSet__getTableEntry(table, element)) != null)
        return false;
      P._LinkedHashSet__setTableEntry(table, element, this._newLinkedCell$1(element));
      return true;
    },
    _modified$0: function() {
      var t1 = this._modifications;
      if (typeof t1 !== "number")
        return t1.$add();
      this._modifications = 1073741823 & t1 + 1;
    },
    _newLinkedCell$1: function(element) {
      var t1, _this = this,
        cell = P._LinkedHashSetCell$(H._instanceType(_this)._precomputed1._as(element));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        _this._last = t1._next = cell;
      }
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_collection$_length(t1 + 1);
      _this._modified$0();
      return cell;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (H.boolConversionCheck(J.$eq$(bucket[i]._element, element)))
          return i;
      return -1;
    },
    set$_collection$_length: function(_length) {
      this._collection$_length = H._asInt(_length);
    },
    get$_first: function() {
      return this._first;
    },
    get$_modifications: function() {
      return this._modifications;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    _LinkedHashSetIterator$2: function(_set, _modifications, $E) {
      this._cell = type$.nullable__LinkedHashSetCell._as(this._set.get$_first());
    },
    get$current: function() {
      return this.$ti._precomputed1._as(this._collection$_current);
    },
    moveNext$0: function() {
      var _this = this,
        cell = _this._cell,
        t1 = _this._set;
      if (!H.boolConversionCheck(J.$eq$(_this._modifications, t1.get$_modifications())))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this.set$_cell(cell._next);
        return true;
      }
    },
    set$_cell: function(_cell) {
      this._cell = type$.nullable__LinkedHashSetCell._as(_cell);
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    get$_modifications: function() {
      return this._modifications;
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t1 = this._box_0;
      if (!H.boolConversionCheck(t1.first))
        this.result.write$1(", ");
      t1.first = false;
      t1 = this.result;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    $signature: 20
  };
  P.MapMixin.prototype = {
    get$length: function(_) {
      return J.get$length$as(this.get$keys());
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    }
  };
  P._SetBase.prototype = {
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    $isIterable: 1
  };
  P.bool.prototype = {};
  P.Duration.prototype = {
    get$inHours: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 3600000000);
    },
    get$inMinutes: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 60000000);
    },
    get$inSeconds: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 1000000);
    },
    get$inMilliseconds: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 1000);
    },
    get$inMicroseconds: function() {
      return this._duration;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && H.boolConversionCheck(J.$eq$(this._duration, other.get$inMicroseconds()));
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs, _this = this,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = _this.get$inMicroseconds();
      if (typeof t2 !== "number")
        return t2.$lt();
      if (t2 < 0)
        return "-" + H.S(_this.$negate(0));
      twoDigitMinutes = t1.call$1(J.remainder$1$n(_this.get$inMinutes(), 60));
      twoDigitSeconds = t1.call$1(J.remainder$1$n(_this.get$inSeconds(), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(J.remainder$1$n(_this.get$inMicroseconds(), 1000000));
      return H.S(_this.get$inHours()) + ":" + twoDigitMinutes + ":" + twoDigitSeconds + "." + sixDigitUs;
    },
    $negate: function(_) {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$_microseconds(0 - t1);
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      H._asInt(n);
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 5
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      H._asInt(n);
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 5
  };
  P.Error.prototype = {
    get$stackTrace: function() {
      return H.Primitives_extractStackTrace(this);
    }
  };
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + H.S(P.Error_safeToString(t1));
      return "Assertion failed";
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!H.boolConversionCheck(this._hasValue) ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + H.S(message),
        prefix = H.S(_this.get$_errorName()) + nameString + messageString;
      if (!H.boolConversionCheck(_this._hasValue))
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      if (H._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (H.boolConversionCheck(J.$eq$(t1, 0)))
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + H.S(this.message);
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + H.S(this.message);
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    }
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var variableName = this.variableName;
      return variableName == null ? "Reading static variable during its initialization" : "Reading static variable '" + variableName + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      var message = this.message;
      if (message == null)
        return "Exception";
      return "Exception: " + H.S(message);
    }
  };
  P.int.prototype = {};
  P.Iterable.prototype = {
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; H.boolConversionCheck(it.moveNext$0());)
        ++count;
      return count;
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.List.prototype = {$isIterable: 1};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(C.JSNull_methods, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {};
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToHumanReadableString(this);
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.StackTrace.prototype = {};
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.String.prototype = {$isPattern: 1};
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return J.get$length$as(this._contents);
    },
    write$1: function(obj) {
      this._writeString$1(H.S(obj));
    },
    writeAll$2: function(objects, separator) {
      type$.Iterable_dynamic._as(objects);
      H._asString(separator);
      this.set$_contents(P.StringBuffer__writeAll(this._contents, objects, separator));
    },
    toString$0: function(_) {
      return H.Primitives_flattenString(this._contents);
    },
    _writeString$1: function(str) {
      H._asString(str);
      this.set$_contents(H.Primitives_stringConcatUnchecked(this._contents, str));
    },
    set$_contents: function(_contents) {
      this._contents = H._asString(_contents);
    }
  };
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 3);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 3);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 3);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static(P, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 21, 0);
  })();
  (function inheritance() {
    var _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Error, P.Iterable, H.TypeErrorDecoder, H.NullThrownFromJavaScriptException, H.ExceptionAndStackTrace, H._StackTrace, H.Closure, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.Rti, H._FunctionParameters, P._TimerImpl, P._AsyncAwaitCompleter, P.DeferredLoadException, P.Future, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P._StreamIterator, P.AsyncError, P._ZoneFunction, P.ZoneDelegate, P.Zone, P._Zone, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.bool, P.Duration, P.StackOverflowError, P._Exception, P.num, P.List, P.Null, P.StackTrace, P._StringStackTrace, P.String, P.StringBuffer]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Error, [H.LateInitializationErrorImpl, H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, H.DeferredNotLoadedError, P.AssertionError, H._Error, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inherit(H.EfficientLengthIterable, P.Iterable);
    _inheritMany(H.Closure, [H.TearOffClosure, H.loadDeferredLibrary_initializeSomeLoadedHunks, H.loadDeferredLibrary_loadAndInitialize, H.loadDeferredLibrary_loadAndInitialize_closure, H.loadDeferredLibrary_closure, H._loadHunk_closure, H._loadHunk_success, H._loadHunk_failure, H._loadHunk_closure0, H._loadHunk_closure1, H._loadHunk_closure2, H._loadHunk_closure3, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P.Future_wait__error_set, P.Future_wait__stackTrace_set, P.Future_wait__error_get, P.Future_wait__stackTrace_get, P.Future_wait_handleError, P.Future_wait_handleError_closure, P.Future_wait_closure, P.Future_wait__closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncCompleteWithValue_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P.MapBase_mapToString_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inherit(H.JsLinkedHashMap, P.MapBase);
    _inherit(H.LinkedHashMapKeyIterable, H.EfficientLengthIterable);
    _inherit(H._TypeError, H._Error);
    _inherit(P._AsyncCompleter, P._Completer);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._LinkedHashSet, P._SetBase);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P.int, P.num);
  })();
  var init = {
    deferredInitialized: Object.create(null),
    isHunkLoaded: function(hash) {
      return !!$__dart_deferred_initializers__[hash];
    },
    isHunkInitialized: function(hash) {
      return !!init.deferredInitialized[hash];
    },
    initializeLoadedHunk: function(hash) {
      var hunk = $__dart_deferred_initializers__[hash];
      if (hunk == null)
        throw "DeferredLoading state error: code with hash '" + hash + "' was not loaded";
      initializeDeferredHunk(hunk);
      init.deferredInitialized[hash] = true;
    },
    deferredLibraryParts: {
      foo: [0]
    },
    deferredPartUris: ["deferred_sample1.dart.dart2js.js_1.part.js"],
    deferredPartHashes: ["etqPwoCdGQUOU+ymVQtzoK3tfYY="],
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["Null()", "~()", "Null(@)", "~(~())", "Null(Null)", "String(int)", "Future<@>(int)", "Null(List<@>)", "~(@,String,StackTrace?)", "Null(~())", "~(@)", "Null(@,StackTrace)", "Null(int,@)", "@(Object)", "@(StackTrace)", "Object()", "StackTrace()", "~(Object,StackTrace)", "Null(Object,StackTrace)", "_Future<@>(@)", "Null(Object?,Object?)", "~(Zone?,ZoneDelegate?,Zone,~())"],
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"JSNumber":{"num":[]},"JSInt":{"int":[],"num":[]},"JSDouble":{"num":[]},"JSString":{"String":[],"Pattern":[]},"LateInitializationErrorImpl":{"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"NullError":{"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"DeferredNotLoadedError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"]},"LinkedHashMapKeyIterable":{"Iterable":["1"]},"_Error":{"Error":[]},"_TypeError":{"Error":[]},"_AsyncCompleter":{"_Completer":["1"]},"_Future":{"Future":["1"]},"AsyncError":{"Error":[]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_LinkedHashSet":{"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"]},"_SetBase":{"Iterable":["1"]},"AssertionError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"int":{"num":[]},"List":{"Iterable":["1"]},"_StringStackTrace":{"StackTrace":[]},"String":{"Pattern":[]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"MapBase":2,"_SetBase":1}'));
  0;
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      AsyncError: findType("AsyncError"),
      BoundClosure: findType("BoundClosure"),
      Error: findType("Error"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      List_dynamic: findType("List<@>"),
      Null: findType("Null"),
      Object: findType("Object"),
      Pattern: findType("Pattern"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      TypeErrorDecoder: findType("TypeErrorDecoder"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      Zone: findType("Zone"),
      _FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>"),
      _Future_dynamic: findType("_Future<@>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Function: findType("Function?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_LinkedHashMapCell: findType("LinkedHashMapCell?"),
      nullable_Object: findType("Object?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_Zone: findType("Zone?"),
      nullable_ZoneDelegate: findType("ZoneDelegate?"),
      nullable__AsyncCallbackEntry: findType("_AsyncCallbackEntry?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.C__ZoneFunction = new P._ZoneFunction(H.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"));
    C.Duration_0 = new P.Duration(0);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), H.findType("JSArray<0&>"));
  })();
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._loadingLibraries = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Future_Null);
    $._eventLog = H.setRuntimeTypeInfo([], type$.JSArray_String);
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = H.setRuntimeTypeInfo([], H.findType("JSArray<Object>"));
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObject())));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObjectWithNonClosure())));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null)));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull()));
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined()));
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null)));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull()));
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined()));
    });
    _lazy($, "_loadedLibraries", "$get$_loadedLibraries", function() {
      return P.LinkedHashSet_LinkedHashSet(type$.String);
    });
    _lazy($, "_cspNonce", "$get$_cspNonce", function() {
      return H._computeCspNonce();
    });
    _lazy($, "_crossOrigin", "$get$_crossOrigin", function() {
      return H._computeCrossOrigin();
    });
    _lazy($, "thisScript", "$get$thisScript", function() {
      return H._computeThisScript();
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", function() {
      return new Error().stack != void 0;
    });
  })();
  (function nativeSupport() {
    hunkHelpers.setOrUpdateInterceptorsByTag({});
    hunkHelpers.setOrUpdateLeafTags({});
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(K.main0, []);
    else
      K.main0([]);
  });
})();

//# sourceMappingURL=deferred_sample1.dart.dart2js.js.map
